! Divvun & Giellatekno - open source grammars for Sámi and other languages
! Copyright © 2000-2010 The University of Tromsø & the Norwegian Sámi Parliament
! http://giellatekno.uit.no & http://divvun.no
!
! This program is free software; you can redistribute and/or modify
! this file under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version. The GNU General Public License
! is found at http://www.gnu.org/licenses/gpl.html. It is
! also available in the file $GTHOME/LICENSE.txt.
!
! Other licensing options are available upon request, please contact
! giellatekno@uit.no or feedback@divvun.no

! ===========================================
!! !!!Continuation lexicons for abbreviations
! ===========================================

!! !!Lexica for adding tags and periods
! ----------------------------------

LEXICON ab ! No POS, don't know what pos, guessing N
ab-noun ;
LEXICON ab-dot
ab-dot-noun ;
LEXICON ab-nodot
ab-nodot-noun ;

!! !!The sublexica

!! !Continuation lexicons for abbrs both with and witout final period

LEXICON ab-noun-itrab
+ABBR+Gram/IAbbr:    ab-noun ;
LEXICON ab-noun-trab
+ABBR+Gram/TAbbr:    ab-noun ;
LEXICON ab-noun-trnumab
+ABBR+Gram/TNumAbbr: ab-noun ;

LEXICON ab-noun   !!= * __@CODE@__
         ab-nodot-noun ;
+Use/NG: ab-dot-noun   ;

LEXICON ab-adj-itrab
+ABBR+Gram/IAbbr: ab-adj ;
LEXICON ab-adj   !!= * __@CODE@__
         ab-nodot-adj ;
+Use/NG: ab-dot-adj   ;

LEXICON ab-adv-itrab
+ABBR+Gram/IAbbr:    ab-adv ;
LEXICON ab-adv   !!= * __@CODE@__
         ab-nodot-adv ;
+Use/NG: ab-dot-adv   ;

LEXICON ab-num-itrab
+ABBR+Gram/IAbbr: ab-num ;
LEXICON ab-num   !!= * __@CODE@__
         ab-nodot-num ;
+Use/NG: ab-dot-num   ;

!! !Lexicons without final period

LEXICON ab-nodot-noun-itrab
+ABBR+Gram/IAbbr:    ab-nodot-noun ;
LEXICON ab-nodot-noun-trab
+ABBR+Gram/TAbbr:    ab-nodot-noun ;
LEXICON ab-nodot-noun-trnumab
+ABBR+Gram/TNumAbbr: ab-nodot-noun ;
LEXICON ab-nodot-noun   !!= * __@CODE@__  The bulk
+N+ABBR: # ;

LEXICON ab-nodot-adj-itrab
+ABBR+Gram/IAbbr: ab-nodot-adj ;
LEXICON ab-nodot-adj   !!= * __@CODE@__
+A+ABBR: # ;

LEXICON ab-nodot-adv-itrab
+ABBR+Gram/IAbbr:    ab-nodot-adv ;
LEXICON ab-nodot-adv-trnumab
+ABBR+Gram/TNumAbbr: ab-nodot-adv ;
LEXICON ab-nodot-adv   !!= * __@CODE@__
+Adv+ABBR: #     ;
           RHyph ;

LEXICON ab-nodot-num   !!= * __@CODE@__
+Num+ABBR: # ;

!! !Lexicons with final period

LEXICON ab-dot-noun-itrab
+ABBR+Gram/IAbbr:    ab-dot-noun ;
LEXICON ab-dot-noun-trab
+ABBR+Gram/TAbbr:    ab-dot-noun ;
LEXICON ab-dot-noun-trnumab
+ABBR+Gram/TNumAbbr: ab-dot-noun ;
LEXICON ab-dot-noun   !!= * __@CODE@__  This is the lexicon for abbrs that must have a period.
+N+ABBR: DOT ;

LEXICON ab-dot-adj-itrab
+ABBR+Gram/IAbbr:    ab-dot-adj ;
LEXICON ab-dot-adj-trab
+ABBR+Gram/TAbbr:    ab-dot-adj ;
LEXICON ab-dot-adj   !!= * __@CODE@__  This is the lexicon for abbrs that must have a period.
+A+ABBR: DOT ;

LEXICON ab-dot-adv-itrab
+ABBR+Gram/IAbbr:     ab-dot-adv ;
LEXICON ab-dot-adv-numnoab
+ABBR+Gram/NumNoAbbr: ab-dot-adv ;
LEXICON ab-dot-adv-trab
+ABBR+Gram/TAbbr:     ab-dot-adv ;
LEXICON ab-dot-adv-trnumab
+ABBR+Gram/TNumAbbr:  ab-dot-adv ;

LEXICON ab-dot-adv   !!= * __@CODE@__  This is the lexicon for abbrs that must have a period.
+A+ABBR:  DOT ; ! Adv without case.

LEXICON ab-dot-num-trab  +Num+ABBR+Gram/TAbbr: ab-dot-num ;
LEXICON ab-dot-num   !!= * __@CODE@__  This is the lexicon for abbrs that must have a period.
+A+ABBR: DOT ;

LEXICON ab-dot-cc-trab
+CC+ABBR+Gram/TAbbr: ab-dot-cc ;
LEXICON ab-dot-cc   !!= * __@CODE@__
+ABBR:  DOT ;


LEXICON ab-dot-verb-itrab
+V+ABBR+Gram/IAbbr:    ab-dot-verb ;

LEXICON ab-dot-verb   !!= * __@CODE@__
 +V+Imp+ABBR: DOT ; ! Period.


LEXICON ab-dot-IVprfprc-trab    +V+ABBR+Gram/TAbbr:    ab-dot-IVprfprc ;

LEXICON ab-dot-IVprfprc   !!= * __@CODE@__
 +V+Sg+PrfPtc+ABBR: DOT ; ! Period.






LEXICON DOT   !!= * __@CODE@__ - Adds the dot to dotted abbreviations.

 +Use/-PMatch:%. # ; ! We need the dot here for regular fsts
! Split the abbr + full stop in two segments, but only when using pmatch:
< "@P.Pmatch.Loc@" {.} "+CLB":0 "+Use/PMatch":0 > # ;
! Make a regular ABBR analysis AND backtrack to find alternative analyses:
< "+Use/PMatch":0 "@P.Pmatch.Backtrack@" 0:%. > # ;

! Gives:
!$ echo 'su.' \
!| hfst-tokenise -g tools/tokenisers/tokeniser-gramcheck-gt-desc.pmhfst 
!"<su.>"
!	"." CLB <W:0.0> "<.>"
!		"su" Adv ABBR Gram/NumNoAbbr <W:0.0> "<su>"
!	"su" Adv ABBR Gram/NumNoAbbr <W:0.0>
!	"." CLB <W:0.0> "<.>"
!		"son" Pron Pers Sg3 Gen <W:0.0> "<su>"
!	"." CLB <W:0.0> "<.>"
!		"son" Pron Pers Sg3 Acc <W:0.0> "<su>"
!:\n
!
! which is exactly what we want.
