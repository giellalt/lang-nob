# -*- cg-pre-pipe: "hfst-tokenise -g ../../tools/tokenisers/tokeniser-gramcheck-gt-desc.pmhfst" -*-
# Divvun & Giellatekno - open source grammars for Sámi and other languages
# Copyright © 2000-2017 UiT The arctic University of Norway
# http://giellatekno.uit.no & http://divvun.no
#
# This program is free software; you can redistribute and/or modify
# this file under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version. The GNU General Public License
# is found at http://www.gnu.org/licenses/gpl.html. It is
# also available in the file $GTHOME/LICENSE.txt.
#
# Other licensing options are available upon request, please contact
# giellatekno@uit.no or feedback@divvun.no

# ======================================
#!!  #  Bokmål Norwegian Grammar Checker
# ======================================

#  Sámi language technology 2000-2017, UiT The arctic University of Norway #

# ---------------------- #
#   Development setup:   #
# ---------------------- #
#
# cd $GTHOME/langs/nob
# ./autogen.sh
# ./configure --enable-apertium --with-hfst --enable-syntax --enable-grammarchecker --enable-tokenisers --enable-alignment --enable-reversed-intersect
# make
# cd tools/grammarcheckers
# make dev
#
# ---------------------- #
#   Then edit/test as:   #
# ---------------------- #
#
# emacs grammarchecker.cg3  # and C-c C-i / C-c C-c if you have cg-mode installed
# echo "Dette er et fin hus." | sh modes/nobgram.mode  
#
# ---------------------- #
#   Other debug-pipes:   #
# ---------------------- #
#
# ls modes/
#
# ---------------------- #


# The pipeline (but use modes, above)
#  echo "Hei." | hfst-tokenise -g ../tokenisers/tokeniser-gramcheck-gt-desc.pmhfst | vislcg3 -g disambiguator.cg3 -t | vislcg3 -g grammarchecker.cg3 -t


#!! This file contains two parts: **Definitions** and **rules**

#!! # Definition section

# ========== #
#!! ## Delimiters #
# ========== #

DELIMITERS = "<.>" "<!>" "<?>" "<...>" "<¶>"; #!!≈  @CODE@

#PARENTHESES = "<$(>" "<$)>" "<$[>" "<$]>" "<${>" "<$}>" "<$«>" "<$»>" ;

# ============= #
#!! ## Grammatical tags
# ============= #

#!! Here we declare all grammatical tags

SETS

# We define end of clause and beginning of clause in a way so that the file
# may be read both by the CG-2 and the vislcg formalisms.

LIST BOS = (>>>) (<s>);
LIST EOS = (<<<) (</s>);

# CG3 doesn´t function without >>> and <<< !


#!! ### Parts of speech tags

LIST N = N ;		   #!!≈ - @CODE@
LIST A = A ;		   #!!≈ - @CODE@
LIST Adv = Adv ;	   #!!≈ - @CODE@
LIST V = V ;		   #!!≈ - @CODE@
LIST Pron = Pron ;	   #!!≈ - @CODE@
LIST CS = CS ;		   #!!≈ - @CODE@
LIST CC = CC ;		   #!!≈ - @CODE@
LIST Det = Det ;	   #!!≈ - @CODE@
LIST Pr = Pr ;		   #!!≈ - @CODE@
LIST Pcle = Pcle ;	   #!!≈ - @CODE@
LIST Num = Num ;	   #!!≈ - @CODE@
LIST Qnt = Qnt ;	   #!!≈ - @CODE@
LIST Interj = Interj ; #!!≈ - @CODE@
LIST IM = IM ;		   #!!≈ - @CODE@


#!! ### Sets for POS sub-categories

LIST Attr = Attr ;		     #!!≈ - @CODE@
LIST AUX = "ha" ; # XXX	     #!!≈ - @CODE@
SET NOT-AUX-V = V - AUX ;    #!!≈ - @CODE@
LIST Pos = Pos ;		     #!!≈ - @CODE@
LIST Comp = Comp ;		     #!!≈ - @CODE@
LIST Superl = Superl ;	     #!!≈ - @CODE@
LIST Sg = Sg ;			     #!!≈ - @CODE@
LIST Pl = Pl ;			     #!!≈ - @CODE@
LIST Def = Def ;		     #!!≈ - @CODE@
SET CC-CS = CC OR CS ;	     #!!≈ - @CODE@
LIST ABBR = ABBR ;		     #!!≈ - @CODE@
LIST ACR = ACR ;		     #!!≈ - @CODE@
LIST Msc = Msc ;		     #!!≈ - @CODE@
LIST Fem = Fem ;		     #!!≈ - @CODE@
LIST Neu = Neu ;		     #!!≈ - @CODE@
LIST MF = MF ;			     #!!≈ - @CODE@
LIST Pers = Pers ;		     #!!≈ - @CODE@
LIST Dem = Dem ;		     #!!≈ - @CODE@
LIST Interr = Interr ;	     #!!≈ - @CODE@
LIST Indef = Indef ;	     #!!≈ - @CODE@
LIST Pass = Pass ;		     #!!≈ - @CODE@
LIST Recipr = Recipr ;	     #!!≈ - @CODE@
LIST Refl = Refl ;		     #!!≈ - @CODE@
LIST Rel = Rel ;		     #!!≈ - @CODE@
LIST Prop = Prop ;		     #!!≈ - @CODE@
LIST Clt = Clt ;		     #!!≈ - @CODE@
LIST Err/Orth = Err/Orth ;   #!!≈ - @CODE@

#!! ### Boundary tags
LIST CLB = CLB ;			  #!!≈ - @CODE@
LIST LEFT = LEFT ;			  #!!≈ - @CODE@
LIST RIGHT = RIGHT ;		  #!!≈ - @CODE@
LIST WEB = WEB ;			  #!!≈ - @CODE@
LIST PPUNCT = PUNCT ;		  #!!≈ - @CODE@
LIST COMMA = "," ;			  #!!≈ - @CODE@
LIST ¶ = ¶ ;					  #!!≈ - @CODE@
LIST QMARK = """ ; 			  #!!≈ - @CODE@
SET PUNCT = PPUNCT - QMARK ;  #!!≈ - @CODE@
# ADD " FOR SYNTAX COLOURING.

#!! ### Sets for Semantic tags
# -------------

LIST Sem/Ani = Sem/Ani ;	   #!!≈ - @CODE@
LIST Sem/Date = Sem/Date ;	   #!!≈ - @CODE@
LIST Sem/Fem = Sem/Fem ;	   #!!≈ - @CODE@
LIST Sem/Group = Sem/Group ;   #!!≈ - @CODE@
LIST Sem/Hum = Sem/Hum ;	   #!!≈ - @CODE@
LIST Sem/ID = Sem/ID ;		   #!!≈ - @CODE@
LIST Sem/Mal = Sem/Mal ;	   #!!≈ - @CODE@
LIST Sem/Measr = Sem/Measr ;   #!!≈ - @CODE@
LIST Sem/Money = Sem/Money ;   #!!≈ - @CODE@
LIST Sem/Obj = Sem/Obj ;	   #!!≈ - @CODE@
LIST Sem/Org = Sem/Org ;	   #!!≈ - @CODE@
LIST Sem/Plc = Sem/Plc ;	   #!!≈ - @CODE@
LIST Sem/Sur = Sem/Sur ;	   #!!≈ - @CODE@
LIST Sem/Time = Sem/Time ;	   #!!≈ - @CODE@
LIST Sem/Year = Sem/Year ;	   #!!≈ - @CODE@
#SET FIRSTNAME = (Prop Sem/Fem) OR (Prop Sem/Mal) ;




#!! ### Sets for Morphosyntactic properties
# --------------------------

LIST Nom = Nom ;	     #!!≈ - @CODE@
LIST Acc = Acc ;	     #!!≈ - @CODE@
LIST RCmpnd = RCmpnd ;   #!!≈ - @CODE@
LIST Ord = Ord ;	     #!!≈ - @CODE@
LIST IV = IV ;		     #!!≈ - @CODE@
LIST TV = TV ;		     #!!≈ - @CODE@
LIST Prt = Prt;		     #!!≈ - @CODE@
LIST Prs = Prs ;	     #!!≈ - @CODE@
LIST Ind = Ind ;	     #!!≈ - @CODE@
LIST Imp = Imp Imprt ;   #!!≈ - @CODE@
LIST Sg3 = Sg3 ;	     #!!≈ - @CODE@
LIST Pl3 = Pl3 ;	     #!!≈ - @CODE@
LIST Inf = Inf ;	     #!!≈ - @CODE@
LIST PrfPrc = PrfPrc ;   #!!≈ - @CODE@
LIST PrsPrc = PrsPrc ;   #!!≈ - @CODE@
 


#!! ## Syntactic tags
# --------------

LIST @+FAUXV = @+FAUXV ;		  #!!≈ - @CODE@
LIST @+FMAINV = @+FMAINV ;		  #!!≈ - @CODE@
LIST @-FAUXV = @-FAUXV ; 		  #!!≈ - @CODE@
LIST @-FMAINV = @-FMAINV ;		  #!!≈ - @CODE@
LIST @-FSUBJ> = @-FSUBJ> ;		  #!!≈ - @CODE@
LIST @-F<OBJ = @-F<OBJ ;		  #!!≈ - @CODE@
LIST @-FOBJ> = @-FOBJ> ;		  #!!≈ - @CODE@
LIST @SPRED<OBJ = @SPRED<OBJ ;	  #!!≈ - @CODE@
LIST @-FADVL = @-FADVL ;		  #!!≈ - @CODE@
SET FOBJ = @-F<OBJ OR @-FOBJ> ;   #!!≈ - @CODE@
SET FMAINV = @-FMAINV OR @+FMAINV OR (V @<OBJ) OR (V @N<) OR (V @<SUBJ) OR (V @<ADVL) ;
SET FAUXV = @-FAUXV OR @+FAUXV ;  #!!≈ - @CODE@

LIST ADVL = Adv Pr ;  #!!≈ - @CODE@
LIST @ADVL = @ADVL @ADVL> @ADVL< @<ADVL @>ADVL @-F<ADVL ;  #!!≈ - @CODE@
LIST @>ADVL = @>ADVL ; #!!≈ - @CODE@
LIST @ADVL< = @ADVL< ; #!!≈ - @CODE@
LIST @<ADVL = @<ADVL ; #!!≈ - @CODE@
LIST @ADVL> = @ADVL> ; #!!≈ - @CODE@
LIST @ADVL>CS = @ADVL>CS ; #!!≈ - @CODE@
LIST @>N = @>N ; #!!≈ - @CODE@
LIST @N< = @N< ; #!!≈ - @CODE@
LIST @>A = @>A ; #!!≈ - @CODE@
LIST @P< = @P< ; #!!≈ - @CODE@
LIST @>P = @>P ; #!!≈ - @CODE@
LIST @HNOUN = @HNOUN ; #!!≈ - @CODE@
LIST @INTERJ = @INTERJ ; #!!≈ - @CODE@
LIST @>Num = @>Num; #!!≈ - @CODE@		     #!!≈ - @CODE@
LIST @Pron< = @Pron< ;					     #!!≈ - @CODE@
LIST @>Pron = @>Pron ;					     #!!≈ - @CODE@
LIST @Num< = @Num< ;					     #!!≈ - @CODE@
LIST @OBJ = @OBJ ;						     #!!≈ - @CODE@
LIST @<OBJ = @<OBJ ;					     #!!≈ - @CODE@
LIST @OBJ> = @OBJ> ;					     #!!≈ - @CODE@
LIST @OPRED = @OPRED ;					     #!!≈ - @CODE@
LIST @<OPRED = @<OPRED ;				     #!!≈ - @CODE@
LIST @OPRED> = @OPRED> ;				     #!!≈ - @CODE@
LIST @PCLE = @PCLE ;					     #!!≈ - @CODE@
LIST @COMP-CS< = @COMP-CS< ;			     #!!≈ - @CODE@
LIST @SPRED = @SPRED ;					     #!!≈ - @CODE@
LIST @<SPRED = @<SPRED ;				     #!!≈ - @CODE@
LIST @SPRED> = @SPRED> ;				     #!!≈ - @CODE@
LIST @SUBJ = @SUBJ ;					     #!!≈ - @CODE@
LIST @<SUBJ = @<SUBJ ;					     #!!≈ - @CODE@
LIST @SUBJ> = @SUBJ> ;					     #!!≈ - @CODE@
SET SUBJ = @<SUBJ OR @SUBJ> OR @SUBJ ;	     #!!≈ - @CODE@
SET SPRED = @<SPRED OR @SPRED> OR @SPRED ;   #!!≈ - @CODE@
SET OPRED = @<OPRED OR @OPRED> OR @OPRED ;   #!!≈ - @CODE@
LIST @PPRED = @PPRED ;					     #!!≈ - @CODE@
LIST @APP = @APP ;						     #!!≈ - @CODE@
LIST @APP-N< = @APP-N< ;				     #!!≈ - @CODE@
LIST @APP-Pron< = @APP-Pron< ;			     #!!≈ - @CODE@
LIST @APP>Pron = @APP>Pron ;			     #!!≈ - @CODE@
LIST @APP-Num< = @APP-Num< ;			     #!!≈ - @CODE@
LIST @APP-ADVL< = @APP-ADVL< ;			     #!!≈ - @CODE@
LIST @VOC = @VOC ;						     #!!≈ - @CODE@
LIST @CVP = @CVP ;						     #!!≈ - @CODE@
LIST @CNP = @CNP ;						     #!!≈ - @CODE@
SET OBJ = (@<OBJ) OR (@OBJ>) OR (@OBJ) OR (@-F<OBJ) OR (@-FOBJ>) ;  #!!≈ - @CODE@
LIST <OBJ = @-F<OBJ @<OBJ ; #!!≈ - @CODE@
LIST OBJ> = @OBJ> @-FOBJ> ; #!!≈ - @CODE@
SET <OBJ-OTHERS = <OBJ ; #!!≈ - @CODE@
SET OBJ>-OTHERS = OBJ> ; #!!≈ - @CODE@
SET SYN-V = V + SUBJ OR OBJ + V OR @ADVL + V OR (V @N<) OR (V @A<) OR V + SPRED OR (V @COMP-CS<) ; #!!≈ - @CODE@
LIST @X = @X ; #!!≈ - @CODE@


 

#!! ### Initials

#!! **INITIAL** = small letters, *CAP-INITIAL** = capital letters

LIST INITIAL = "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m"
        "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"
        "á" "æ" "ø" "å" "ö" "ä" ;

LIST CAP-INITIAL = "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M"
        "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"
        "Á" "Æ" "Ø" "Å" "Ö" "Ä" ;


#!! ## Sets

LIST MONOSYLL_V = (".*[aiouyæøå]"r) "se" "be" "gre" "utse" "innse" "påse" "avse" "kle" ;


LIST hj-V = "være" "ville" "skulle" "måtte" "kunne" "ha" "få" "burde" "bli" ;  #!!≈ - @CODE@
LIST hj-hvd-V = "være" "ha" "få" "bli" ;  #!!≈ - @CODE@
LIST hj-tv-V = "ha" "få" ;  #!!≈ - @CODE@
LIST modalverb = "burde" "få" "kunne" "måtte" "skulle" "ville" ;

LIST hj-V-iv = ("bli" Inf) ("bli" PrfPrc) ("ha" Inf) ("ha" PrfPrc) ("være" Inf) ("være" PrfPrc) ("få" Inf) ("få" PrfPrc) ("skulle" Inf) ("skulle" PrfPrc) ("kunne" Inf) ("kunne" PrfPrc) ("ville" Inf) ("ville" PrfPrc) ("måtte" Inf) ("måtte" PrfPrc) ("burde" Inf) ("burde" PrfPrc) ; #!!≈ - @CODE@



#!! ## Sets of tags
# ========
  SETS
# ========


#!! ### Word or not


LIST WORD = N A Adv V Pron CS CC Po Pr Interj Pcle Num ABBR ACR  \? ;  #!!≈ - @CODE@
 # any word

SET REALWORD = WORD - Num - Ord ; #!!≈ - @CODE@
SET REALWORD-NOTABBR = WORD - Num - Ord - ABBR ; #!!≈ - @CODE@
SET WORD-NOTDE = WORD - ("de") ;  #!!≈ - @CODE@


#!! ### Noun sets

LIST PROBABLY-NOUN = "fylke" "finne" ;

#!! ### Verb sets


# Verbs and their complements
# - - - - - - - - - - - - - -

SET NOT-VERB = WORD - V ; #!!≈ - @CODE@

# Finiteness and mood
# - - - - - - - - - -

SET V-IND-FIN = Prs OR Prt ; #!!≈ - @CODE@
SET V-MOOD = Ind OR Imp ; #!!≈ - @CODE@
SET VFIN =  V-MOOD ; #!!≈ - @CODE@

LIST QUASIAUX = "akte" "anbefale" "begynne" "behøve" "bli" "forsøke" "fortsette" "forvente" "gidde" "glemme" "huske" "klare" "like" "lære" "nekte" "orke" "prøve" "risikere" "slippe" "slutte" "synes" "søke" "tenke" "trenge" "tørre" "unngå" "velge" "vurdere" "være" "ønske" ;  #!!≈ - @CODE@

LIST OBJPREDVERB = "føle" "kjenne" "se" ;


SET VFIN-NOT-IMP = Ind ; #!!≈ - @CODE@
SET VFIN-NOT-AUX = Ind - AUX ; #!!≈ - @CODE@
SET NOT-PRFPRC = WORD - PrfPrc ; #!!≈ - @CODE@

# form
# - - - - 

LIST VERBFORM = Inf PrfPrc PrsPrc Prs Prt Imp ; #!!≈ - @CODE@
LIST INDFORM = Prs Prt Imp ;  #!!≈ - @CODE@,  FINFORM kanskje betre namn...

#!! ### Pronoun sets

LIST DEM-SG = (Pron Dem Sg Nom); #!!≈ - @CODE@
LIST DEM-PL = (Pron Dem Pl Nom); #!!≈ - @CODE@
SET NOT-DEM = WORD - Dem ; #!!≈ - @CODE@
LIST SGPRON = (Pron Sg1) (Pron Sg2) (Pron Sg3) (Pron Sg) ; #!!≈ - @CODE@
LIST PLPRON = (Pron Pl1) (Pron Pl2) (Pron Pl3) (Pron Pl) ; #!!≈ - @CODE@
LIST QUANT-PRON = "mange" ; #!!≈ - @CODE@, This set is for choosing between Adv and Pron Indef.


#!! ### Adjectival sets and their complements

SET NOT-A = WORD - A ; #!!≈ - @CODE@
SET NOT-A-COMMA = WORD - A - COMMA ;  #!!≈ - @CODE@
SET NOT-A-PCLE = WORD - A - Pcle ;  #!!≈ - @CODE@
SET NOT-A-ADV = WORD - A - Adv ;  #!!≈ - @CODE@

 

 
#!! ### Adverbial sets and their complements
# ------------------------------------
SET LEX-ADV = Adv - (A*) ;  #!!≈ - @CODE@
SET NOT-ADV-DE            = WORD - Adv ;  #!!≈ - @CODE@
SET NOT-ADV            = NOT-ADV-DE OR CLB ;  #!!≈ - @CODE@
SET NOT-ADV-N          = NOT-ADV - N;  #!!≈ - @CODE@
SET NOT-ADV-PCLE       = NOT-ADV - Pcle ;  #!!≈ - @CODE@
SET NOT-ADV-INDEF      = NOT-ADV - Indef ;  #!!≈ - @CODE@
SET NOT-ADV-PCLE-ILL   = WORD - Adv - Pcle  ;  #!!≈ - @CODE@
SET NOT-ADV-PCLE-Refl  = WORD - Adv - Pcle - Refl ;  #!!≈ - @CODE@
SET NOT-ADV-PCLE-INDEF = WORD - Adv - Pcle - Indef ;  #!!≈ - @CODE@
SET NOT-ADVL-PCLE-NEG  = WORD - @ADVL - @P< - Pcle ;  #!!≈ - @CODE@


 
#!! ### Introduce finite clauses.
 
LIST TIME-ADVL = "da" "før" ;   #!!≈ - @CODE@
LIST TIME-ADV = (Adv Sem/Time) ;  #!!≈ - @CODE@



#!! ### Coordinators
 
SET CRD = @CNP OR COMMA OR ("/") OR ("-") ;   #!!≈ - @CODE@ AFTER LCRD vs. GCRD disambiguation
LIST GRADE-ADV =  "helt" "svært" "litt" ;  #!!≈ - @CODE@





#!! ## Sets of elements with common syntactic behaviour
# ================================================

SETS

#!! ### Sets for verbs


LIST NOT-REAL-V = PrsPrc ;   #!!≈ - @CODE@
SET REAL-V = V - NOT-REAL-V  ;  #!!≈ - @CODE@
  #!!     - V is all readings with a V tag in them, REAL-V should
  #!! be the ones without an N tag following the V.  
  #!! The REAL-V set thus awaits a fix to the preprocess V ... N bug.
SET MAIN-V = V - FAUXV ;  #!!≈ - @CODE@
 
#!! All active verbs with a TV tag, including V:
LIST V-TRANS = (V TV) ;  #!!≈ - @CODE@


SET TRANS-V = V-TRANS - Pass ;

#!! ### NP sets defined according to their morphosyntactic features
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

LIST N-SG-NOM = (N Sg Nom);  #!!≈ - @CODE@
SET HEAD-N = N - RCmpnd ;  #!!≈ - @CODE@
SET SUBJECTHEAD = N OR A OR Pron - Refl ;   #!!≈ - @CODE@ These, can be subject heads
SET NP = N OR A ;                        #!!≈ - @CODE@ anything that can take except numerals
SET NP-HEAD        = Pron OR HEAD-N ;  #!!≈ - @CODE@
SET NP-HEAD-SG     = SGPRON OR (N Sg) OR (A Sg) - RCmpnd  - Dem ;  #!!≈ - @CODE@
SET NP-HEAD-PL     = PLPRON OR (N Pl) OR (A Pl) - RCmpnd  - Dem ;  #!!≈ - @CODE@
SET NP-HEAD-SG-NOM = SGPRON + Nom OR (N Sg) OR (A Sg) - RCmpnd ;  #!!≈ - @CODE@
SET NP-HEAD-PL-NOM = PLPRON + Nom OR (N Pl) OR (A Pl) - RCmpnd ;  #!!≈ - @CODE@
SET NP-HEAD-NOM    = NP-HEAD-SG-NOM OR NP-HEAD-PL-NOM ;  #!!≈ - @CODE@
SET NP-HEAD-ACC    = (Pron Acc) OR N OR A - RCmpnd ;  #!!≈ - @CODE@


#!! * The PRE-NP-HEAD family of sets

#!! These sets model noun phrases (NPs). The idea is to first define whatever can
#!! occur in front of the head of the NP, and thereafter negate that with the
#!! expression **WORD - premodifiers**.


SET PRE-NP-HEAD = (Prop Attr) OR A OR ABBR OR Num OR RCmpnd OR CC OR (Pron Dem) OR (Pron Ref) OR PrsPrc ; #!!≈ - @CODE@
#OR (Num @>N) OR @>N OR @>A OR @>Pron OR @Num< OR (CC @CNP) OR (@>CC) OR (@Pron<) OR (Prop @>N) OR (PrfPrc @>N) ;  

#!! The strict version of items that can only be premodifiers, not parts of the predicate
SET PRE-NP-V = PrfPrc OR PrsPrc OR (V A) OR (Ind Prs) ;   #!!≈ - @CODE@

#!! to be used together with PRE-NP-HEAD before @>N is disambiguated
SET NP-MEMBER   = PRE-NP-HEAD OR N ;  #!!≈ - @CODE@
SET PRE-A-N     = (Pron Pers Acc) OR (Pron Indef) OR Num OR (A Ord) OR (Pron Dem) OR (Pron Refl) ;   #!!≈ - @CODE@ Acc pga av manglende disambiguering tidlig i fila
SET NOT-PRE-A-N = WORD - PRE-A-N ;  #!!≈ - @CODE@
LIST PUNCT-LEFT = (PUNCT LEFT) ;  #!!≈ - @CODE@
LIST PUNCT-RIGHT = (PUNCT RIGHT) ;  #!!≈ - @CODE@
SET PRE-APP   = COMMA OR PUNCT-LEFT OR PRE-NP-HEAD ;  #!!≈ - @CODE@
#!! This set ist not only for what can stand in front of appositions but also
#!! postmodifiers.

#!! The set **NOT-NPMOD** is used to find barriers between NPs.
#!! Typical usage: ... (*1 N BARRIER NOT-NPMOD) ...
#!! meaning: Scan to the first noun, ignoring anything that can be
#!! part of the noun phrase of that noun (i.e., "scan to the next NP head")

SET NOT-NPMOD = WORD - PRE-NP-HEAD ;     #!!≈ - @CODE@                  
# This is the previous NPNH (npnh) set.
# NOT-NPMOD  = "NOT-PRE-NP-HEAD"
 
SET NOT-NPMOD-ACC     = NOT-NPMOD - Acc OR ABBR ;   #!!≈ - @CODE@
SET NOT-NPMOD-ACC-ADV     = NOT-NPMOD - Acc - Adv OR ABBR ;   #!!≈ - @CODE@
# To be used in mappingrules, before the disambuation of Acc and Gen.                     

SET NOT-NPMODADV    = WORD - PRE-NP-HEAD - Adv ;     #!!≈ - @CODE@                   
#!! NOT-NPMODADV = "NOT-PRE-NP-HEAD-OR-ADV"
SET NOT-NPMODADV-INDEF = WORD - PRE-NP-HEAD - Adv - Indef ;   #!!≈ - @CODE@             
#!! NOT-NPMODADVI = "     ...-OR-INDEF"
SET NOT-NPMODCC = WORD - PRE-NP-HEAD - COMMA - @CNP ;  #!!≈ - @CODE@
SET NAPP = WORD - PRE-APP ;  #!!≈ - @CODE@



#!! ### Miscellaneous sets
# ------------------

SET NOT-NUM = WORD - Num ;   #!!≈ - @CODE@
SET CARDINALS = Num - Ord ;  #!!≈ - @CODE@
SET NOT-CC = WORD - CC ;  #!!≈ - @CODE@
SET NOT-PCLE = WORD - Pcle ;  #!!≈ - @CODE@
LIST CONTRA = "men" ;  #!!≈ - @CODE@ In lean muitalan, muhto dál muitalan.
LIST PROSEANTA = "prosent" "%" ;  #!!≈ - @CODE@
SET REAL-CLB = CLB - COMMA ;  #!!≈ - @CODE@
SET NOT-INITIAL-CC = WORD - INITIAL - CC ;  #!!≈ - @CODE@



#!! ### Border sets and their complements
# ---------------------------------

SET CP = (Pron Interr) OR (Pron Rel) ;  #!!≈ - @CODE@
LIST BOUNDARYSYMBOLS =  "\;" ":" "-" "–" ;  #!!≈ - @CODE@
SET S-BOUNDARY = CP OR BOUNDARYSYMBOLS OR @CVP ;  #!!≈ - @CODE@
	# includes CP
	# this one includes @CVP, the conjunction which actually connects two sentences (each with a finite verb) to each other, 
	# and not @CNP, which coordinates internal NP-/AdvP-/AP ... coordination
	# To be used only AFTER the disambiguation of @CVP and @CNP taking place in the chapter right before "Disambiguating pronouns"


SET BOC = S-BOUNDARY OR BOS ;  #!!≈ - @CODE@
SET BOC-PUNCT = BOC - ("-") - ("–") ;   #!!≈ - @CODE@
SET EOC = S-BOUNDARY OR EOS ;  #!!≈ - @CODE@
SET NP-BOUNDARY = BOS OR EOS OR REAL-CLB OR VFIN OR Inf OR Recipr OR Pr OR Pcle OR Interj OR CS OR CP OR @CVP ;   #!!≈ - @CODE@
SET APP-BOUNDARY = REAL-CLB OR VFIN OR Inf OR Recipr OR Pr OR Pcle OR Interj OR CS OR CP OR PrfPrc - @>N ;   #!!≈ - @CODE@
#!! A special barrier used with mapping of appositions. 

# This set contains FMAINV with @, which means that it functions for all kind of mainverbs after the verb-mapping rules 
SET SV-BOUNDARY = S-BOUNDARY OR Inf - FAUXV OR FMAINV ;  #!!≈ - @CODE@
SET SVF-BOUNDARY = S-BOUNDARY OR VFIN ;  #!!≈ - @CODE@
#!! This set is ment to use in rules for disambiguating due to verbs or verbsets. 
#!! Here we search for either an S-BOUNDARY or a finite verb, either aux or main.

SET CCCOMMA = CC OR COMMA ;  #!!≈ - @CODE@
	# remember that those are potential sentence boundaries, too



#!! ### Syntactic sets
# --------------

LIST ALLSYNTAG = (@+FAUXV) (@+FMAINV) (@-FAUXV) (@-FMAINV) (@-FSUBJ>)(@-FOBJ)(@-F<ADVL)(@-FADVL>)(@>A) (@>ADVL) (@ADVL<) (@<ADVL) (@ADVL>) (@ADVL) (@>N) (@APP) (@APP-N<) (@APP-Pron<) (@APP>Pron) (@APP-Num<) (@APP-ADVL<) (@VOC)(@CNP) (@CVP) (@P<) (@>P) (@HNOUN) (@INTERJ) (@Pron<) (@OBJ) (@OBJ>) (@<OBJ) (@OPRED) (@<OPRED) (@OPRED>) (@SPRED<OBJ) (@PCLE) (@COMP-CS<) (@N<) (@SPRED) (@<SPRED) (@SPRED>) (@PPRED) (@Num<) (@SUBJ) (@<SUBJ) (@SUBJ>) (@X);
 

SET NON-APP = ALLSYNTAG - (@APP);   #!!≈ - @CODE@

#!! These were the set types.



#!! ### Grammarchecker sets

#!! - The tag syntax is as follows: 
#!! - **ruletype - object - is_now - should_be
#!! - Example: *&msyn-agr-adjmsc-adjneu* is a morphosyntactic agreement rule where a Msc adjective should be Neu

#!! There are 20 or so different rule tags, see the rule section below.

LIST &msyn-advl-a-adv = &msyn-advl-a-adv ;
LIST &msyn-agr-adjmsc-adjneu = &msyn-agr-adjmsc-adjneu ;    
LIST &msyn-agr-adjneu-adjmsc = &msyn-agr-adjneu-adjmsc ;    
LIST &msyn-agr-adjsg-adjpl = &msyn-agr-adjsg-adjpl ;    
LIST &msyn-agr-detmsc-detneu = &msyn-agr-detmsc-detneu ;			    
LIST &msyn-agr-detneu-detfem =  &msyn-agr-detneu-detfem ;   
LIST &msyn-agr-detneu-detmsc =  &msyn-agr-detneu-detmsc ;   
LIST &msyn-np-demindef-demdef = &msyn-np-demindef-demdef ;
LIST &msyn-pred-adjmsc-adjneu = &msyn-pred-adjmsc-adjneu ;  
LIST &msyn-pred-adjneu-adjmsc = &msyn-pred-adjneu-adjmsc ;
LIST &msyn-pron-nom-acc = &msyn-pron-nom-acc ;			    
LIST &msyn-qu-comp-superl = &msyn-qu-comp-superl ;
LIST &msyn-qucompl-def-indef = &msyn-qucompl-def-indef ;    
LIST &msyn-v-inf-pres = &msyn-v-inf-pres ;				    
LIST &msyn-v-pres-inf = &msyn-v-pres-inf ;				    
LIST &real-aa-og = &real-aa-og ;						    
LIST &real-bli-vaere = &real-bli-vaere ;				    
LIST &real-og-aa = &real-og-aa ;						    
LIST &real-vaere-bli = &real-vaere-bli ;				    
LIST &real-cp-null-som = &real-cp-null-som ;
LIST &syn-adv-v3-v2 = &syn-adv-v3-v2 ;
LIST &syn-pp-v3-v2 = &syn-pp-v3-v2 ;

MAPPING-PREFIX = & ; # &msyn-agr-adjmsc-adjneu

#!! ## For ADDRELATION rules (perhaps not in use)
TEMPLATE nextWordCrossSent = (-1 (*));  #!!≈ - @CODE@ =  Adding mark to word that find the reference word to the left
TEMPLATE previousWordCrossSent = (1 (*));  #!!≈ - @CODE@ =  and vice versa


#!! # Rule section
SECTION


#!! ## Speller rules

#!! Speller suggestions rule – add &SUGGESTWF to any spelling suggestion
#!! that we actually want to suggest to the user.

#!! **Speller rule:** Add *typo* to misspelled words 
#!! The simplest is to just add it to all spelled words:
ADD:spell-it-all (&typo &SUGGESTWF) (<spelled>) ;

#!! **Speller rule:** Do not mark misspelled words in quotes
#!! But perhaps you want to only suggest spellings of words that are not inside "quotes":
ADD:spell-conservatively (&typo &SUGGESTWF) (<spelled>) IF (NEGATE -1 QMARK LINK 2 QMARK);


#!! ## NP internal agreement rules

#!!  Ensure preceding adjective agrees with noun

#!! **Agreement rule:** masculine adjectives should be neuter (msyn-agr-adjmsc-adjneu). Context: *Et fin/fint hus.*
ADD:msyn-agr-adjmsc-adjneu (&msyn-agr-adjmsc-adjneu) TARGET A IF (-1 Det)(0 A + MF OR A + Msc OR A + Fem)(NOT 0 A + Neu)(1C N + Neu);
COPY:msyn-agr-adjmsc-adjneu (Neu Sg Indef &SUGGEST)  EXCEPT (Fem Sg Indef) OR (Msc Sg Indef) OR (MF Sg Indef)  TARGET (A Pos &msyn-agr-adjmsc-adjneu) ;
ADDRELATION:msyn-agr-adjmsc-adjneu ($2) (*) FROM (T:nextWordCrossSent LINK 0 (&msyn-agr-adjmsc-adjneu)) ;

## Dette er et fin hus.
#$ Dette er et fint hus.


#!! **Agreement rule:**  Singular adjectives should be plural (msyn-agr-adjsg-adjpl). Context: *mange organisert/organiserte fritidsaktiviteter*.
ADD:msyn-agr-adjsg-adjpl (&msyn-agr-adjsg-adjpl) TARGET A IF 
(-1 ("mange") OR A + Pos + Sg + Def)
(NOT -1 Superl)
(0 A + Msc + Sg + Indef)
(1 N + Msc + Pl + Indef);
COPY:msyn-agr-adjsg-adjpl (Pl Def &SUGGEST) EXCEPT (Msc Sg Indef) TARGET (A &msyn-agr-adjsg-adjpl);
ADDRELATION:msyn-agr-adjsg-adjpl ($2) (*) FROM (T:nextWordCrossSent LINK 0 (&msyn-agr-adjsg-adjpl)) ;

#!! **Agreement rule:**  Neuter adjectives shoul be masculine (msyn-agr-adjneu-adjmsc). Context: *En fint/fin båt*.
ADD:msyn-agr-adjneu-adjmsc (&msyn-agr-adjneu-adjmsc) TARGET A IF 
(-1 Det + MF OR Pron + Indef + MF OR Pron + Indef + Msc)
(0 A + Neu)
(1 N + Msc);
COPY:msyn-agr-adjneu-adjmsc (Msc Sg Indef &SUGGEST) EXCEPT (Neu Sg Indef) TARGET (A Pos &msyn-agr-adjneu-adjmsc);
ADDRELATION:msyn-agr-adjneu-adjmsc ($2) (*) FROM (T:nextWordCrossSent LINK 0 (&msyn-agr-adjneu-adjmsc)) ;

## Dette er en fint båt.
#$ Dette er en fin båt.

#!! **Agreement rule:**  Masculine definite determiners should be neuter (msyn-agr-detmsc-detneu). Context: *den/det huset*.
ADD:msyn-agr-detmsc-detneu (&msyn-agr-detmsc-detneu) TARGET (Det Dem Msc Sg) IF (1 (N Neu Sg Def));
COPY:msyn-agr-detmsc-detneu (Neu Sg &SUGGEST) EXCEPT (Msc Sg) TARGET (Det Dem &msyn-agr-detmsc-detneu);
## Mannen kjøpte den huset.
#$ Mannen kjøpte det huset.

#!! **Agreement rule:**  Masculine indefinite determiners should be neuter (msyn-agr-detmsc-detneu). Context: *en/et land*.
ADD:msyn-agr-detmsc-detneu (&msyn-agr-detmsc-detneu) TARGET ("en" Det Dem Msc Sg) IF (*1C (N Neu Sg Indef) BARRIER NOT-NPMOD);
COPY:msyn-agr-detmsc-detneu ("et" Neu Sg &SUGGEST) EXCEPT ("en" Msc Sg) TARGET (Det Dem &msyn-agr-detmsc-detneu);
## Vi bor i en land.
#$ Vi bor i et land.



#!! **Agreement rule:**  Neuter definite determiners should be feminine (msyn-agr-detneu-detfem). Context: *det/den boka*.
ADD:msyn-agr-detneu-detfem (&msyn-agr-detneu-detfem) TARGET (Det Dem Neu Sg) IF (1 (N Fem Sg Def));
COPY:msyn-agr-detneu-detfem (Fem Sg &SUGGEST) EXCEPT (Neu Sg) TARGET (Det Dem &msyn-agr-detneu-detfem);
## Mannen kjøpte det boka.
#$ Mannen kjøpte den boka.


#!! **Agreement rule:**  Neuter indefinite determiners should be feminine (msyn-agr-detneu-detfem). Context: *et/ei realitetens kvinne*.
ADD:msyn-agr-detneu-detfem (&msyn-agr-detneu-detfem) TARGET ("et" Det Neu) IF (1 (Def Clt))(2 (N Sg Fem Indef));
COPY:msyn-agr-detneu-detfem ("ei" Det Fem &SUGGEST) EXCEPT ("et" Det Neu) TARGET (&msyn-agr-detneu-detfem);

#!! **Agreement rule:**  Neuter indefinite determiners should be feminine (msyn-agr-detneu-detfem). Context: *et/ei realitetens kvinne*.
ADD:msyn-agr-detneu-detfem (&msyn-agr-detneu-detfem) TARGET ("et" Pron Indef Neu Sg) IF (1 (Def Clt))(2 (N Sg Fem Indef));
COPY:msyn-agr-detneu-detfem ("ei" Det Fem &SUGGEST) EXCEPT ("et" Pron Indef Neu Sg) TARGET (&msyn-agr-detneu-detfem);
## Det er et realitetens kvinne
#$ Det er ei realitetens kvinne

#!! **Agreement rule:**  Neuter adjectives should be masculine (msyn-agr-detneu-detmsc). Context: *et/en ... båt*.
ADD:msyn-agr-detneu-detmsc (&msyn-agr-detneu-detmsc) TARGET ("et" Det Neu) IF (1 (Def Clt))(2 (N Sg Msc Indef));
COPY:msyn-agr-detneu-detmsc ("en" Det Dem Msc Sg &SUGGEST) EXCEPT ("et" Det Neu) TARGET (&msyn-agr-detneu-detmsc);

#!! **Agreement rule:** same rule but for Pron
ADD:msyn-agr-detneu-detmsc (&msyn-agr-detneu-detmsc) TARGET ("et" Pron Indef Neu Sg) IF (1 (Def Clt))(2 (N Sg Msc Indef));
COPY:msyn-agr-detneu-detmsc ("en" Det Dem Msc Sg &SUGGEST) EXCEPT ("et" Pron Indef Neu Sg) TARGET (&msyn-agr-detneu-detmsc);
## Det er et realitetens forsvarer.
#$ Det er en realitetens forsvarer.


# Definite that should be indefinite
#ADD:msyn-defness_m_def (&msyn-defness_m_def) TARGET

#!! **Definiteness rule:** Double definiteness. Context: *disse grunner/grunnene*
ADD:msyn-np-demindef-demdef (&msyn-np-demindef-demdef) TARGET (N Pl Indef) IF (*-1 ("denne") + Det + Dem + Pl BARRIER NOT-A)(NEGATE 1 ("som"))(NEGATE 1 COMMA LINK 1 ("som")) ;
COPY:msyn-np-demindef-demdef (Def &SUGGEST) EXCEPT (Indef) TARGET (N Pl &msyn-np-demindef-demdef) ;	
ADDRELATION:msyn-np-demindef-demdef ($2) ("disse") FROM (*1 N BARRIER NOT-A LINK 0 &msyn-np-demindef-demdef) ;
	
## Jeg må analysere disse grunner.
#$ Jeg må analysere disse grunnene.

#!! **Definiteness rule:** Double definiteness. Context: *de sosiale aspekter/aspektene*
ADD:msyn-np-demindef-demdef (&msyn-np-demindef-demdef) TARGET (N Pl Indef) IF
(-2 ("den") + Det +  Dem + Pl)
(-1 A + Pos + Def)
(NOT -1 Clt)
(NOT 0 Prs)
(NEGATE 1 ("som"))
(NEGATE 1 COMMA LINK 1 ("som")) ;
COPY:msyn-np-demindef-demdef (Def &SUGGEST) EXCEPT (Indef) TARGET (N Pl &msyn-np-demindef-demdef) ;	
ADDRELATION:msyn-np-demindef-demdef ($2) ("disse") FROM (*1 N BARRIER NOT-A LINK 0 &msyn-np-demindef-demdef) ;
	

#!! ## Quantifier phrases

#!! **Agreement rule:** Indef after quantifier. (msyn-qucompl-def-indef). Context: *Vi har mange bøkene/bøker.*
ADD:msyn-qucompl-def-indef (&msyn-qucompl-def-indef) TARGET N + Pl + Def IF
	(*-1 Num OR ("mange") + Pos OR ("mange") + Superl
	BARRIER NOT-A
	LINK NOT 0 Sem/ID
	LINK NEGATE *-1 ("den") + Det + Dem + Pl OR ("denne") OR ("disse") OR ("begge") OR ("all") BARRIER NOT-A);
#	LINK NEGATE -1 (§) OR ("all") OR Def);
ADD:msyn-qucompl-def-indef (&msyn-qucompl-def-indef) TARGET N + Pl + Def IF
	(*-1 ("mange") + Comp
	     BARRIER NOT-A
     	     	  LINK NOT 0 Sem/ID
     		       LINK NOT -1 (§));
COPY:msyn-qucompl-def-indef (Indef &SUGGEST) EXCEPT (Use/NG Def) TARGET (N Msc Pl &msyn-qucompl-def-indef); 
COPY:msyn-qucompl-def-indef (Indef &SUGGEST) EXCEPT (Use/NG Def) TARGET (N Fem Pl &msyn-qucompl-def-indef); 
COPY:msyn-qucompl-def-indef (Indef &SUGGEST) EXCEPT (Use/NG Def) TARGET (N Neu Pl &msyn-qucompl-def-indef); 
COPY:msyn-qucompl-def-indef (Indef &SUGGEST) EXCEPT (Def) TARGET (N Msc Pl &msyn-qucompl-def-indef); 
COPY:msyn-qucompl-def-indef (Indef &SUGGEST) EXCEPT (Def) TARGET (N Fem Pl &msyn-qucompl-def-indef); 
COPY:msyn-qucompl-def-indef (Indef &SUGGEST) EXCEPT (Def) TARGET (N Neu Pl &msyn-qucompl-def-indef); 
ADDRELATION:msyn-qucompl-def-indef ($2) (*) FROM (T:previousWordCrossSent LINK 0 (&msyn-qucompl-def-indef)) ;
## Vi har mange bøkene.
## Vi har fem bøkene.
## Vi har 5 bøkene.

#!! **Comparative rule:** Quantor in superlative: *de flere/fleste ulike kulturene*
ADD:msyn-qu-comp-superl (&msyn-qu-comp-superl) TARGET ("mange" A Comp Pl Indef) IF (-1 ("den") + Det + Dem + Pl) (*1 N + Pl + Def BARRIER NOT-A) ;
COPY:msyn-qu-comp-super (Superl Pl Def &SUGGEST) EXCEPT (Comp Pl Indef) TARGET (A &msyn-qu-comp-superl) ;
ADDRELATION:&msyn-qu-comp-superl ($2) (N) FROM (*-1 A LINK 0 (&&msyn-qu-comp-superl)) ;


#!! ## Predicative gender agreement

## 


#!! Predicative: neuter adjective should be masculine (msyn-pred-adjneu-adjmsc). Context: *Båten var fint/fin.*
ADD:msyn-pred-adjneu-adjmsc (&msyn-pred-adjneu-adjmsc) TARGET (A) IF (-2 ("den") + Pron + Pers + Sg3 OR N + Msc + Sg + Def  LINK *-1 BOS BARRIER NOT-NPMOD)(-1 ("være"))(0 A + Pos + Neu + Sg + Indef)(NEGATE 0 A + Msc OR A + Fem OR A + MF)(NOT 1 N + Neu);
COPY:msyn-pred-adjneu-adjmsc (Msc Sg Indef &SUGGEST) EXCEPT (Neu Sg Indef)  TARGET (A Pos &msyn-pred-adjneu-adjmsc);
ADDRELATION:msyn-pred-adjneu-adjmsc ($2) (N) FROM (2 A LINK 0 (&msyn-pred-adjneu-adjmsc)) ;

#$ Båten var fint
## Båten var fin.


#!! Predicative: msculine adjective should be neuter (msyn-pred-adjmsc-adjneu). Context: *Eplet var god/godt.*
# For risikabelt med "det"
#ADD:msyn-pred-adjmsc-adjneu (&msyn-pred-adjmsc-adjneu) TARGET (A) IF (-2 ("det") LINK *-1 BOS BARRIER NOT-NPMOD)(-1 ("være"))(0C Msc OR Fem OR MF)(NOT 1 N + Msc);

#!!  **Agreement rule:**. Context: *Eplet var god/godt.*
ADD:msyn-pred-adjmsc-adjneu (&msyn-pred-adjmsc-adjneu) TARGET (A) IF (NOT *-1 Pr BARRIER NOT-NPMOD LINK -1 N + Msc)(-2C (N Neu Sg) OR ("det"))(-1 ("være"))(0C Msc OR Fem OR MF)(NOT 1 N + Msc);

#!! **Agreement rule:**  Context: *Eplet var god/godt.*
ADD:msyn-pred-adjmsc-adjneu (&msyn-pred-adjmsc-adjneu) TARGET (A) IF 
(*-1 ("være") BARRIER NOT-ADV LINK -1C  (N Neu Sg) LINK *-1 BOS BARRIER NOT-NPMOD)
(0C Msc OR Fem OR MF)
(NOT 1 N + Msc);
COPY:msyn-pred-adjmsc-adjneu (Neu Sg Indef &SUGGEST) EXCEPT (Msc Sg Indef)  TARGET (A Pos &msyn-pred-adjmsc-adjneu);
ADDRELATION:msyn-pred-adjmsc-adjneu ($2) (N) FROM (2 A LINK 0 (&msyn-pred-adjmsc-adjneu)) ;

## Eplet var god.
#$ Eplet var godt.
## Landet var full av folk.
#$ Landet var fullt av folk.
#$ Hver avkrok i landet var full av folk.

#!! **Agreement rule:**  Context: *Jeg spiste et eple som var god/godt.*
ADD:msyn-pred-adjmsc-adjneu (&msyn-pred-adjmsc-adjneu) TARGET (A Msc Sg) IF (-3C (N Neu Sg) OR ("det"))(-2 ("som"))(-1 ("være"))(0C Msc OR Fem OR MF)(NOT 1 N + Msc);
COPY:msyn-pred-adjmsc-adjneu (Neu Sg Indef &SUGGEST) EXCEPT (Msc Sg Indef) TARGET (A Pos &msyn-pred-adjmsc-adjneu);
ADDRELATION:msyn-pred-adjmsc-adjneu ($2) (N) FROM (3 A LINK 0 (&msyn-pred-adjmsc-adjneu)) ;
ADDRELATION:msyn-pred-adjmsc-adjneu ($2) (N) FROM (4 A LINK 0 (&msyn-pred-adjmsc-adjneu)) ;
ADDRELATION:msyn-pred-adjmsc-adjneu ($2) (N) FROM (5 A LINK 0 (&msyn-pred-adjmsc-adjneu)) ;
ADDRELATION:msyn-pred-adjmsc-adjneu ($2) (N) FROM (6 A LINK 0 (&msyn-pred-adjmsc-adjneu)) ;
## Jeg spiste et eple som var god.
#$ Jeg spiste et eple som var godt.





#!! ## Case errors

#!! Case rules so far: Nominative pronouns should be accusative 

#!!  **Agreement rule:** The context is P-complement.  (msyn-pron-nom-acc). Context: *Vi snakker om du.*
ADD:msyn-pron-nom-acc (&msyn-pron-nom-acc) TARGET (Pron Pers Sg2 Nom) IF
	(-1 ("av") + Pr);
ADD:msyn-pron-nom-acc (&msyn-pron-nom-acc) TARGET (Pron Pers Sg2 Nom) IF
	(-1 Pr) #(-1 ("om") + Pr)
	(NEGATE 1 Prs OR Prt);
COPY:msyn-pron-nom-acc (Acc &SUGGEST) EXCEPT (Nom) TARGET (Pron Pers Sg2 &msyn-pron-nom-acc);
ADDRELATION:msyn-pron-nom-acc ($2) (Pr) FROM (1 Pron LINK 0 (&msyn-pron-nom-acc)) ;
## Vi snakker om du.
#$ Vi snakker om deg.

ADD:msyn-pron-nom-acc (&msyn-pron-nom-acc) TARGET (Pron Pers Sg1 Nom) IF
	(-1 ("om") + Pr)
	(NOT 1 Prs OR Prt);
COPY:msyn-pron-nom-acc (Acc &SUGGEST) EXCEPT (Nom) TARGET (Pron Pers Sg1 &msyn-pron-nom-acc);
ADDRELATION:msyn-pron-nom-acc ($2) (Pr) FROM (1 Pron LINK 0 (&msyn-pron-nom-acc)) ;

ADD:msyn-pron-nom-acc (&msyn-pron-nom-acc) TARGET (Pron Pers Sg2 Nom) IF
	(-1 Pr)
	(NOT -1 ("som") OR ("om") OR ("for") OR ("før"))
	(NOT 1 Ind);
COPY:msyn-pron-nom-acc (Acc &SUGGEST) EXCEPT (Nom) TARGET (Pron Pers Sg2 &msyn-pron-nom-acc);
ADDRELATION:msyn-pron-nom-acc ($2) (Pr) FROM (1 Pron LINK 0 (&msyn-pron-nom-acc)) ;


ADD:msyn-pron-nom-acc (&msyn-pron-nom-acc) TARGET (Pron Pers Sg1 Nom) IF
	(-1 ("av") + Pr);
ADD:msyn-pron-nom-acc (&msyn-pron-nom-acc) TARGET (Pron Pers Sg1 Nom) IF
	(-1 Pr)
	(NOT -1 ("som") OR ("om") OR ("for") OR ("før"))
	(NOT 1 Ind);
COPY:msyn-pron-nom-acc (Acc &SUGGEST) EXCEPT (Nom) TARGET (Pron Pers Sg1 &msyn-pron-nom-acc);
ADDRELATION:msyn-pron-nom-acc ($2) (Pr) FROM (1 Pron LINK 0 (&msyn-pron-nom-acc)) ;
## Han vet av jeg kommer.


#!! ## Finite verb errors

#!! **Verb rule:** Infinitive and no finite form in the sentence (msyn-v-inf-pres). Context: *Jeg like/liker peanøtter.*
ADD:msyn-v-inf-pres (&msyn-v-inf-pres) TARGET (V Inf) OR MONOSYLL_V + Imp IF
	(*-2 BOS BARRIER VFIN OR ("så"))
	(NEGATE *-2 OBJPREDVERB OR ("måtte") OR ("la") BARRIER SV-BOUNDARY)
	(-1C (N) OR (Pron Nom))
	(NOT -1 ("Gud") OR ("herre"))
	(NEGATE -1 ("å") OR ("takk") + N + Neu + Sg + Def)
	(0 Inf OR Imp LINK NEGATE 0 Prs OR PROBABLY-NOUN OR Pass OR ("så") OR ("nå") OR ("vår") OR ("øyne") OR ("ære") OR ("sanne"))
	(NOT 1 ("Gud") OR ("herre")); #(NOT *0 VFIN);


COPY:msyn-v-inf-pres (Ind Prs &SUGGEST) EXCEPT (Inf) OR (Imp)  TARGET (V &msyn-v-inf-pres);
ADDRELATION:msyn-v-inf-pres ($2) (*) FROM (1 V LINK 0 (&msyn-v-inf-pres)) ;

## Jeg like å lærer norsk.
#$ Jeg liker å lære norsk.

#$ Vi så lyset forsvinne.
#$ Retten til å drive fiske er grunnlovsfestet.

## Jeg like peanøtter.   #!!≈ - *@CODE@*
#$ Jeg liker peanøtter.  #!!≈ - *@CODE@*

## Jeg spise peanøtter.
#$ Jeg spiser peanøtter.

#$ Hvorfor skulle jeg miste dere begge på en slik dag?


#!! ## Infinitive

#!!  **Verb rule:** Verb error: Present tense should be infinitive (msyn-v-pres-inf). Context: *Jeg vil skriver et brev.*
ADD:msyn-v-pres-inf (&msyn-v-pres-inf) TARGET V IF
	(0 (Ind Prs))
	#	(NOT 0 N + Pl + Indef LINK -1 Pron + Pers + Nom OR N)
	(NEGATE -3 N)
	(-2C (N) OR (Pron Nom))
	(-1 hj-V)(NOT 0 Pass)
	(NEGATE 0 (N Pl) LINK -1 hj-hvd-V)
	(NEGATE 1 (Pron Nom))
	(NEGATE 1 N LINK NOT -1 hj-tv-V);
	#$ Min eldste sønn hadde {planer}.
	#$ Så mange ganger du vil {kan} du gjette.
	#$ De fineste gavene jeg får er gaver laget av barnehender
	
COPY:msyn-v-pres-inf (Inf &SUGGEST) EXCEPT (Ind Prs)  TARGET (V Ind Prs &msyn-v-pres-inf);
ADDRELATION:msyn-v-pres-inf ($2) (V) FROM (1 V LINK 0 (&msyn-v-pres-inf)) ;
#$ De beste gavene jeg får er laget av barnehender.

ADD:msyn-IM (&msyn-v-pres-inf) TARGET V IF (0 (Ind Prs))(-1 IM)(NOT 0 Pass);

## Jeg vil skriver et brev.   #!!≈ - *@CODE@* (funkar ikkje)
#$ Jeg vil skrive et brev.   #!!≈ - *@CODE@*
ADD:msyn-v-pres-inf (&msyn-v-pres-inf) TARGET V IF (0 (Ind Prs))(*-2C QUASIAUX BARRIER NOT-ADV)(-1 IM)(NOT 0 Pass);
COPY:msyn-v-pres-inf (Inf &SUGGEST) EXCEPT (Ind Prs)  TARGET (V Ind Prs &msyn-v-pres-inf);
ADDRELATION:msyn-v-pres-inf ($2) (V) FROM (2 V LINK 0 (&msyn-v-pres-inf)) ;

## Jeg liker å skriver et brev.
#$ Jeg liker å skrive et brev.


#!! ## Adverb errors

ADD:msyn-advl-a-adv (&msyn-advl-a-adv) TARGET A IF (*-1 ("det") + Pron + Pers + Sg3 BARRIER NOT-ADV LINK -1 ("gjøre") + Ind OR ("ha") + Ind)(0 A + Pos + Fem + Sg + Indef OR A + Pos + Msc + Sg + Indef)(NOT 0 A + Neu) ;
COPY:msyn-advl-a-adv (Neu Sg Indef &SUGGEST) EXCEPT (Msc Sg Indef) TARGET (A Pos Sg Indef &msyn-advl-a-adv) ;
COPY:msyn-advl-a-adv (Neu Sg Indef &SUGGEST) EXCEPT (Fem Sg Indef) TARGET (A Pos Sg Indef &msyn-advl-a-adv) ;


#!! ## Word order errors

#!! ### V3 -> V2


ADD:syn-pp-v3-v2 (&syn-pp-v3-v2) TARGET VFIN IF
	(-1 N OR Pron + Pers + Nom OR ("det") + Pron LINK -1 N LINK *-1 Pr BARRIER NOT-NPMOD);
MOVE:syn-pp-v3-v2 (V &syn-pp-v3-v2) BEFORE (-1 N OR Pron + Pers + Nom OR ("det") + Pron);
## I dag mannen går til byen.
## Etter en god middag mannen går til byen.

ADD:syn-adv-v3-v2 (&syn-adv-v3-v2) TARGET VFIN IF
	(-1 N OR Pron + Pers + Nom OR ("det") + Pron LINK -1 Adv LINK -1 BOS);
MOVE:syn-adv-v3-v2 (V &syn-adv-v3-v2) BEFORE (-1 N OR Pron + Pers + Nom OR ("det") + Pron);




#!! ## og/å errors

#!! ### The *og* -> *å* rules 

#!! **Realword rule:** og should be å real-og-aa. Context: *Det er ikke til og holde ut.*
ADD:real-og-aa (&real-og-aa) TARGET ("og" CC) IF (-3 ("være"))(-2 ("ikke"))(-1 ("til"))(1 Inf);
ADD:real-og-aa (&real-og-aa) TARGET ("og" CC) IF (-2 ("komme"))(-1 ("til"))(1 Inf);
COPY:real-og-aa ("å" IM &SUGGEST) EXCEPT ("og" CC) TARGET (CC &real-og-aa);

## Det er ikke til og holde ut.  #!!≈ - *@CODE@*
#$ Det er ikke til å holde ut.   #!!≈ - *@CODE@*
## Hvem vet hva Kari kommer til og finne på?
#$ Hvem vet hva Kari kommer til å finne på?

#!! **Realword rule:** og should be aa between Ind and Inf (real-og-aa). Context: *Vi prøver og gå.*
ADD:real-og-aa (&real-og-aa) TARGET ("og" CC) IF (-1 Ind)(NOT -1 Inf)(1 Inf);
COPY:real-og-aa ("å" IM &SUGGEST) EXCEPT ("og" CC) TARGET (CC &real-og-aa);

## Vi prøver og gå.  #!!≈ - *@CODE@*
#$ Vi prøver å gå.  #!!≈ - *@CODE@*

#!! ### The *å* -> *og* rules 

#!! **Realword rule:** å should be og between nouns (real-aa-og). Context: *Det var Trond å Kari.*
ADD:real-aa-og (&real-aa-og) TARGET ("å") IF (-1 N) (1C N);
COPY:real-aa-og ("og" CC &SUGGEST) EXCEPT ("å" IM) TARGET ( &real-aa-og);
ADDRELATION:real-aa-og ($2) (N) FROM (1 N LINK 0 (&real-aa-og)) ;
ADDRELATION:real-aa-og ($3) (N) FROM (-1 N LINK 0 (&real-aa-og)) ;
## Det var Trond å Kari.  #!!≈ - *@CODE@*
#$ Det var Trond og Kari.  #!!≈ - *@CODE@*

#!! **Realword rule:** å should be og between similar verbforms except 2nd V = obj (real-aa-og). Context: *Vi må lese å skrive lyrikk.*
ADD:real-v-aa-og (&real-v-aa-og) TARGET ("å") IF (NOT *-4 ("som") BARRIER NOT-NPMOD)(-2 modalverb)(-1 V + $$VERBFORM LINK NOT 0 QUASIAUX) (1 V + $$VERBFORM);
#$ Det er ikke så lett som man skulle tro å skrive lyrikk.
## Vi må lese å skrive lyrikk

#!! **Realword rule:** å should be og between similar verbforms except 2nd V = obj (real-aa-og). Not: *Det er ikke så lett som man skulle tro å skrive lyrikk.*
ADD:real-v-aa-og (&real-v-aa-og) TARGET ("å") IF
(-2 modalverb)
(-1 V + $$VERBFORM LINK NOT 0 QUASIAUX)
(NOT *-1 ("som"))
(1 V + $$VERBFORM);
#COPY:real-v-aa-og ("og" CC &SUGGEST) EXCEPT ("å" IM) TARGET (IM &real-v-aa-og);
#COPY:real-v-aa-og ("og" CC &SUGGEST) EXCEPT ("å" Use/SpellNoSugg) TARGET (IM &real-v-aa-og);
COPY:real-v-aa-og ("og" CC &SUGGEST) EXCEPT ("å" Use/SpellNoSugg N Sem/Sign ABBR Gram/TAbbr N ABBR) TARGET (N &real-v-aa-og);

#$ Vi prøver å skrive lyrikk.
#$ Vi må prøve å skrive lyrikk.
## Vi må lese å skrive lyrikk.
#$ Det er ikke så lett som man skulle tro å skrive lyrikk.
## Vi vil skrive å utgi lyrikk.

#!! **Realword rule:** å should be og between similar verbforms except 2nd V = obj (real-aa-og). Context: *Vi vil hoppe å/og sprette.*
ADD:real-v-aa-og (&real-v-aa-og) TARGET ("å") IF ( -2 modalverb)(-1 V + $$INDFORM)(NOT -1 QUASIAUX) (1 V + $$INDFORM);

#!! **Realword rule:** å should be og between similar verbforms except 2nd V = obj (real-aa-og). Context: *Vi hopper å/og spretter.*
ADD:real-v-aa-og (&real-v-aa-og) TARGET ("å") IF (NOT -2 modalverb)(-1 V + $$INDFORM)(NOT -1 QUASIAUX OR ("for")) (1 V + $$INDFORM);
COPY:real-v-aa-og ("og" CC &SUGGEST) EXCEPT ("å" IM) TARGET (IM &real-v-aa-og);
COPY:real-v-aa-og ("og" CC &SUGGEST) EXCEPT ("å" Use/SpellNoSugg N Sem/Sign ABBR Gram/TAbbr N ABBR) TARGET ( &real-aa-og);

ADDRELATION:real-v-aa-og ($2) (V) FROM (1 IM OR N LINK 0 (&real-v-aa-og)) ;
ADDRELATION:real-v-aa-og ($3) (V) FROM (-1 IM OR N LINK 0 (&real-v-aa-og)) ;

ADD:real-cp-null-som (&real-cp-null-som) TARGET ("hvilken") IF
(-1 V)
	(1 V);
COPY:real-cp-null-som ("hva som" CS &SUGGEST) EXCEPT ("hvilken" Det Dem Neu Sg) OR ("hvilken" Det Dem Fem Sg) OR ("hvilken" Det Dem Msc Sg)  TARGET (&real-cp-null-som);
#$ Jeg vil lære hvilket passer for meg.
#$ Jeg vil lære hva sin passer for meg.


#!! ## Punctuation rules
#!! Simple punctuation rules showing how to change the lemma in the suggestions:

#!! **Quotation mark rule:** Use correct quotation mark. 
ADD:use-guillemets (&guillemets) TARGET (""");
COPY:left-guillemet ("«" &SUGGEST) EXCEPT (""") TARGET (&guillemets) ;
COPY:right-guillemet ("»" &SUGGEST) EXCEPT (""") TARGET (&guillemets) ;

#!! **Ellipsis rule:** Ellipsis … for ... (use-ellipsis)
ADD:use-ellipsis (&ellipsis) TARGET ("...");
COPY:use-ellipsis ("…" &SUGGEST) EXCEPT ("...") TARGET (&ellipsis) ;
