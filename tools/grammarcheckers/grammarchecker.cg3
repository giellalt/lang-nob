# -*- cg-pre-pipe: "hfst-tokenise -g ../../tools/tokenisers/tokeniser-gramcheck-gt-desc.pmhfst" -*-
# Divvun & Giellatekno - open source grammars for Sámi and other languages
# Copyright © 2000-2017 UiT The arctic University of Norway
# http://giellatekno.uit.no & http://divvun.no
#
# This program is free software; you can redistribute and/or modify
# this file under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version. The GNU General Public License
# is found at http://www.gnu.org/licenses/gpl.html. It is
# also available in the file $GTHOME/LICENSE.txt.
#
# Other licensing options are available upon request, please contact
# giellatekno@hum.uit.no or divvun@hum.uit.no

# ==================================================================== #
#!!   B O K M Å L   N O R W E G I A N   G R A M M A R   C H E C K E R
# ==================================================================== #
# ====================================================================

#  Sámi language technology 2000-2017, UiT The arctic University of Norway #

# ---------------------- #
#   Development setup:   #
# ---------------------- #
#
# cd $GTHOME/langs/nob
# ./autogen.sh
# ./configure --enable-apertium --with-hfst --enable-syntax --enable-grammarchecker --enable-tokenisers --enable-alignment --enable-reversed-intersect
# make
# cd tools/grammarcheckers
# make dev
#
# ---------------------- #
#   Then edit/test as:   #
# ---------------------- #
#
# emacs grammarchecker.cg3  # and C-c C-i / C-c C-c if you have cg-mode installed
# echo "Dette er et fin hus." | sh modes/nobgram.mode  
#
# ---------------------- #
#   Other debug-pipes:   #
# ---------------------- #
#
# ls modes/
#
# ---------------------- #


# The pipeline (but use modes, above)
#  echo "Hei." | hfst-tokenise -g ../tokenisers/tokeniser-gramcheck-gt-desc.pmhfst | vislcg3 -g disambiguator.cg3 -t | vislcg3 -g grammarchecker.cg3 -t



      # =========================================== #
      #      Short table of contents                #
      # =========================================== #

      # Delimiters
      # Tags and sets
      # Grammar checking rules


# ========== #
# Delimiters #
# ========== #

DELIMITERS = "<.>" "<!>" "<?>" "<...>" "<¶>";

#PARENTHESES = "<$(>" "<$)>" "<$[>" "<$]>" "<${>" "<$}>" "<$«>" "<$»>" ;

# ============= #
# Tags and sets #
# ============= #

SETS

# I define end of clause and beginning of clause in a way so that the file
# may be read both by the CG-2 and the vislcg formalisms.

LIST BOS = (>>>) (<s>);
LIST EOS = (<<<) (</s>);

# CG3 doesn´t function without >>> and <<< !

# Tags declared as single-membered LISTs 
# ======================================

# Parts of speech
# ---------------

LIST N = N ;
LIST A = A ;
LIST Adv = Adv ;
LIST V = V ;
LIST Pron = Pron ;
LIST Attr = Attr ;
LIST Det = Det ;
LIST AUX = "ha" ; # XXX
SET NOT-AUX-V = V - AUX ;
LIST Comp = Comp ;
LIST Sg = Sg ;
LIST Pl = Pl ;
LIST Def = Def ;

LIST CS = CS ;
LIST CC = CC ;
SET CC-CS = CC OR CS ;
LIST Pr = Pr ;
LIST Pcle = Pcle ;
LIST Num = Num ;
LIST Interj = Interj ;
LIST ABBR = ABBR ;
LIST ACR = ACR ;
LIST IM = IM ;

LIST Msc = Msc ;
LIST Fem = Fem ;
LIST Neu = Neu ;
LIST MF = MF ;

LIST CLB = CLB ;
LIST LEFT = LEFT ;
LIST RIGHT = RIGHT ;
LIST WEB = WEB ;
LIST QMARK = """ ; # ADD " FOR SYNTAX COLOURING.
LIST PPUNCT = PUNCT ;
SET PUNCT = PPUNCT - QMARK ;

LIST COMMA = "," ;
LIST ¶ = ¶;

#LIST V* = V* ;

#!! * Sets for POS sub-categories
# ------------------

LIST Pers = Pers ;
LIST Dem = Dem ;
LIST Interr = Interr ;
LIST Indef = Indef ;
LIST Pass = Pass ;

LIST Recipr = Recipr ;
LIST Refl = Refl ;
LIST Rel = Rel ;
 
#LIST Adp = Adp ;

LIST Prop = Prop ;

LIST Err/Orth = Err/Orth ;

#!! * Sets for Semantic tags
# -------------

LIST Sem/Ani = Sem/Ani ;
LIST Sem/Date = Sem/Date ;
LIST Sem/Fem = Sem/Fem ;
LIST Sem/Group = Sem/Group ;
LIST Sem/Hum = Sem/Hum ;
LIST Sem/ID = Sem/ID ;
LIST Sem/Mal = Sem/Mal ;
LIST Sem/Measr = Sem/Measr ;
LIST Sem/Money = Sem/Money ;
LIST Sem/Obj = Sem/Obj ;
LIST Sem/Org = Sem/Org ;
LIST Sem/Plc = Sem/Plc ;
LIST Sem/Sur = Sem/Sur ;
LIST Sem/Time = Sem/Time ;
LIST Sem/Year = Sem/Year ;
#SET FIRSTNAME = (Prop Sem/Fem) OR (Prop Sem/Mal) ;




#!! * Sets for Morphosyntactic properties
# --------------------------

LIST Nom = Nom ;
LIST Acc = Acc ;
#LIST Dat = Dat ;

#LIST Sg = Sg ;
#LIST Pl = Pl ;

LIST RCmpnd = RCmpnd ;

#LIST Cmpnd = Cmpnd ;
 
#LIST SgNomCmp = SgNomCmp ;
 

#LIST Comp = Comp ;
#LIST Superl = Superl ;

#LIST Attr = Attr ;
LIST Ord = Ord ;
 
#LIST Qst = Qst ;
 
LIST IV = IV ;
LIST TV = TV ;


LIST Prt = Prt;
LIST Prs = Prs ;
 

LIST Ind = Ind ;

LIST Imp = Imp Imprt ;

#LIST Sg1 = Sg1 ;
#LIST Sg2 = Sg2 ;
LIST Sg3 = Sg3 ;

#LIST Pl1 = Pl1 ;
#LIST Pl2 = Pl2 ;
LIST Pl3 = Pl3 ;

LIST Inf = Inf ;

LIST PrfPrc = PrfPrc ;

LIST PrsPrc = PrsPrc ;
 

# Derivation
# ----------
# Syntactic tags
# --------------

LIST @+FAUXV = @+FAUXV ;
LIST @+FMAINV = @+FMAINV ;
LIST @-FAUXV = @-FAUXV ;
 
LIST @-FMAINV = @-FMAINV ;
LIST @-FSUBJ> = @-FSUBJ> ;
LIST @-F<OBJ = @-F<OBJ ;
LIST @-FOBJ> = @-FOBJ> ;
LIST @SPRED<OBJ = @SPRED<OBJ ;
LIST @-FADVL = @-FADVL ;

SET FOBJ = @-F<OBJ OR @-FOBJ> ; 
SET FMAINV = @-FMAINV OR @+FMAINV OR (V @<OBJ) OR (V @N<) OR (V @<SUBJ) OR (V @<ADVL) ;
SET FAUXV = @-FAUXV OR @+FAUXV ;

LIST ADVL = Adv Pr ;
LIST @ADVL = @ADVL @ADVL> @ADVL< @<ADVL @>ADVL @-F<ADVL ;
LIST @>ADVL = @>ADVL ;
LIST @ADVL< = @ADVL< ;
LIST @<ADVL = @<ADVL ;
LIST @ADVL> = @ADVL> ;
LIST @ADVL>CS = @ADVL>CS ;

LIST @>N = @>N ;

LIST @N< = @N< ;
 

LIST @>A = @>A ;

LIST @P< = @P< ;

LIST @>P = @>P ;

LIST @HNOUN = @HNOUN ;
LIST @INTERJ = @INTERJ ;
 
LIST @>Num = @>Num;

LIST @Pron< = @Pron< ;
LIST @>Pron = @>Pron ;

LIST @Num< = @Num< ;

LIST @OBJ = @OBJ ;
LIST @<OBJ = @<OBJ ;
LIST @OBJ> = @OBJ> ;
LIST @OPRED = @OPRED ;
LIST @<OPRED = @<OPRED ;
LIST @OPRED> = @OPRED> ;
LIST @PCLE = @PCLE ;
LIST @COMP-CS< = @COMP-CS< ;
 
LIST @SPRED = @SPRED ;
LIST @<SPRED = @<SPRED ;
LIST @SPRED> = @SPRED> ;
LIST @SUBJ = @SUBJ ;
LIST @<SUBJ = @<SUBJ ;
LIST @SUBJ> = @SUBJ> ;
SET SUBJ = @<SUBJ OR @SUBJ> OR @SUBJ ;
SET SPRED = @<SPRED OR @SPRED> OR @SPRED ;
SET OPRED = @<OPRED OR @OPRED> OR @OPRED ;

LIST @PPRED = @PPRED ;
 
LIST @APP = @APP ;
LIST @APP-N< = @APP-N< ;
LIST @APP-Pron< = @APP-Pron< ;
LIST @APP>Pron = @APP>Pron ;
LIST @APP-Num< = @APP-Num< ;
LIST @APP-ADVL< = @APP-ADVL< ;
LIST @VOC = @VOC ;

LIST @CVP = @CVP ;
LIST @CNP = @CNP ;

SET OBJ = (@<OBJ) OR (@OBJ>) OR (@OBJ) OR (@-F<OBJ) OR (@-FOBJ>) ;
LIST <OBJ = @-F<OBJ @<OBJ ;
LIST OBJ> = @OBJ> @-FOBJ> ;

SET <OBJ-OTHERS = <OBJ ;
SET OBJ>-OTHERS = OBJ> ;

SET SYN-V = V + SUBJ OR OBJ + V OR @ADVL + V OR (V @N<) OR (V @A<) OR V + SPRED OR (V @COMP-CS<) ;


LIST @X = @X ;


 

# Initials
# --------

LIST INITIAL = "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m"
        "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"
        "á" "æ" "ø" "å" "ö" "ä" ;

LIST CAP-INITIAL = "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M"
        "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"
        "Á" "Æ" "Ø" "Å" "Ö" "Ä" ;



LIST hj-V = "være" "ville" "skulle" "måtte" "kunne" "ha" "få" "burde" "bli" ;
LIST hj-V-iv = ("bli" Inf) ("bli" PrfPrc) ("ha" Inf) ("ha" PrfPrc) ("være" Inf) ("være" PrfPrc) ("få" Inf) ("få" PrfPrc) ("skulle" Inf) ("skulle" PrfPrc) ("kunne" Inf) ("kunne" PrfPrc) ("ville" Inf) ("ville" PrfPrc) ("måtte" Inf) ("måtte" PrfPrc) ("burde" Inf) ("burde" PrfPrc) ;



# Tag sets
# ========
  SETS
# ========


# Word or not
# -----------
LIST WORD = N A Adv V Pron CS CC Po Pr Interj Pcle Num ABBR ACR  \? ;
 # any word

SET REALWORD = WORD - Num - Ord ;

SET REALWORD-NOTABBR = WORD - Num - Ord - ABBR ;

SET WORD-NOTDE = WORD - ("de") ; 

# Verb sets
# ---------

# Verbs and their complements
# - - - - - - - - - - - - - -

SET NOT-VERB = WORD - V ;

# Finiteness and mood
# - - - - - - - - - -

SET V-IND-FIN = Prs OR Prt ;
 # Problem: "In boahtán" is an invisible indicative

SET V-MOOD = Ind OR Imp ;

SET VFIN =  V-MOOD ;

LIST QUASIAUX = "akte" "begynne" "fortsette" "gidde" "huske" "like" "lære" "orke" "prøve" "slippe" "slutte" "tenke" ;
	
SET VFIN-NOT-IMP = Ind ;
SET VFIN-NOT-AUX = Ind - AUX ;

SET NOT-PRFPRC = WORD - PrfPrc ;

# form
# - - - - 

LIST VERBFORM = Inf PrfPrc PrsPrc Prs Prt Imp ;
LIST INDFORM = Prs Prt ;

# Pronoun sets
# ------------


LIST DEM-SG = (Pron Dem Sg Nom);
LIST DEM-PL = (Pron Dem Pl Nom);
SET NOT-DEM = WORD - Dem ;

LIST SGPRON = (Pron Sg1) (Pron Sg2) (Pron Sg3) (Pron Sg) ;
LIST PLPRON = (Pron Pl1) (Pron Pl2) (Pron Pl3) (Pron Pl) ;

LIST QUANT-PRON = "mange" ;
# This set is for choosing between Adv and Pron Indef.

# Adjectival sets and their complements
# -------------------------------------

SET NOT-A = WORD - A ;
SET NOT-A-COMMA = WORD - A - COMMA ;
SET NOT-A-PCLE = WORD - A - Pcle ;

SET NOT-A-ADV = WORD - A - Adv ;

 
 # and many others
 
# Adverbial sets and their complements
# ------------------------------------
SET LEX-ADV = Adv - (A*) ;

SET NOT-ADV-DE            = WORD - Adv ;
SET NOT-ADV            = NOT-ADV-DE OR CLB ;
SET NOT-ADV-N          = NOT-ADV - N;
SET NOT-ADV-PCLE       = NOT-ADV - Pcle ;
SET NOT-ADV-INDEF      = NOT-ADV - Indef ;
SET NOT-ADV-PCLE-ILL   = WORD - Adv - Pcle  ;
SET NOT-ADV-PCLE-Refl  = WORD - Adv - Pcle - Refl ;
SET NOT-ADV-PCLE-INDEF = WORD - Adv - Pcle - Indef ;
SET NOT-ADVL-PCLE-NEG  = WORD - @ADVL - @P< - Pcle ;


 
 # Introduce finite clauses.
 
LIST TIME-ADVL = "da" "før" ;

LIST TIME-ADV = (Adv Sem/Time) ;



# Coordinators
# ------------

 
SET CRD = @CNP OR COMMA OR ("/") OR ("-") ;
    # AFTER LCRD vs. GCRD disambiguation
    

LIST ADV-AFTER-NUM = "geardde" ;


LIST GRADE-ADV =  "helt" "svært" "litt" ;





# Sets of elements with common syntactic behaviour
# ================================================

SETS

#!! * Sets for verbs
# -----

LIST NOT-REAL-V = PrsPrc ;

SET REAL-V = V - NOT-REAL-V  ;
  #!!     - V is all readings with a V tag in them, REAL-V should
  #!! be the ones without an N tag following the V.  
  #!! The REAL-V set thus awaits a fix to the preprocess V ... N bug.
            
 
 # The set REAL is smaller than COPULAS, made for verbs with PrfPrc complements: Seammás REAL-COPULAS son dovdan iežas...
LIST REAL-COPULAS = "dáidit" "leat" "soaitit" "veadjit" "liehket" "lea";

#!! * The set COPULAS is for predicative constructions
LIST COPULAS = "dáidit" "gártat" "leat" "soaitit" "šaddat" "orrut" "veadjit" "liehket" "sjaddat" "lea" "sjïdtedh" ;
 #  "bissut" ? 
 # 'Dáidit' can appear without 'leat'.

SET NOT-COP-V = V - COPULAS ;

SET MAIN-V = V - FAUXV ;
 
# All active verbs with a TV tag, including V.

LIST V-TRANS = (V TV) ;


SET TRANS-V = V-TRANS - Pass ;

#!! * NP sets defined according to their morphosyntactic features
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


LIST N-SG-NOM = (N Sg Nom);

SET HEAD-N = N - RCmpnd ;

SET HEAD-N-NOM = (N Nom) - RCmpnd ;

SET SUBJECTHEAD = N OR A OR Pron - Refl ; # These, can be subject heads

SET NP = N OR A ;                      # anything that can take except numerals
SET NP-HEAD        = Pron OR HEAD-N ;
SET NP-HEAD-SG     = SGPRON OR (N Sg) OR (A Sg) - RCmpnd  - Dem ;
SET NP-HEAD-PL     = PLPRON OR (N Pl) OR (A Pl) - RCmpnd  - Dem ;
SET NP-HEAD-SG-NOM = SGPRON + Nom OR (N Sg Nom) OR (A Sg Nom) - RCmpnd ;
SET NP-HEAD-PL-NOM = PLPRON + Nom OR (N Pl Nom) OR (A Pl Nom) - RCmpnd ;
SET NP-HEAD-NOM    = NP-HEAD-SG-NOM OR NP-HEAD-PL-NOM ;
SET NP-HEAD-ACC    = (Pron Acc) OR (N Acc) OR (A Acc) - RCmpnd ;


#!! * The PRE-NP-HEAD family of sets

#!! These sets model noun phrases (NPs). The idea is to first define whatever can
#!! occur in front of the head of the NP, and thereafter negate that with the
#!! expression **WORD - premodifiers**.


SET PRE-NP-HEAD = (Prop Attr) OR (Prop @>N) OR A OR ABBR OR ("buorre") OR     Num OR RCmpnd OR CC OR (Pron Dem) OR (Pron Ref) OR Indef OR 
         (PrfPrc @>N) OR PrsPrc OR (A Ord) OR (Num @>N) OR (A @>N) OR @>N OR @>A OR @>Pron OR @Num< OR (CC @CNP) OR (@>CC) OR (@Pron<) ;
         # The strict version of items that can only be premodifiers, not parts of the predicate

#LIST PRE-NP-HEAD = @>N @>A @>Pron @Num< @CNP ;
         
SET PRE-NP-V = PrfPrc OR PrsPrc OR (V A) OR (Ind Prs) ;
    # to be used together with PRE-NP-HEAD before @>N is disambiguated
         
SET NP-MEMBER   = PRE-NP-HEAD OR N ;

SET PRE-A-N     = (Pron Pers Acc) OR (Pron Indef) OR Num OR (A Ord) OR (Pron Dem) OR (Pron Refl) ; # Acc pga av manglende disambiguering tidlig i fila

SET NOT-PRE-A-N = WORD - PRE-A-N ;

LIST PUNCT-LEFT = (PUNCT LEFT) ;
LIST PUNCT-RIGHT = (PUNCT RIGHT) ;

SET PRE-APP   = COMMA OR PUNCT-LEFT OR PRE-NP-HEAD ;
 # This set ist not only for what can
                            # stand in front of appositions but also
                            # postmodifiers.



#!! The set **NOT-NPMOD** is used to find barriers between NPs.
#!! Typical usage: ... (*1 N BARRIER NPT-NPMOD) ...
#!! meaning: Scan to the first noun, ignoring anything that can be
#!! part of the noun phrase of that noun (i.e., "scan to the next NP head")

SET NOT-NPMOD     = WORD - PRE-NP-HEAD OR ABBR ;                     
# This is the previous NPNH (npnh) set.
# NOT-NPMOD  = "NOT-PRE-NP-HEAD"
 
SET NOT-NPMOD-ACC     = NOT-NPMOD - Acc OR ABBR ; 
SET NOT-NPMOD-ACC-ADV     = NOT-NPMOD - Acc - Adv OR ABBR ; 
# To be used in mappingrules, before the disambuation of Acc and Gen.                     

SET NOT-NPMODADV    = WORD - PRE-NP-HEAD - Adv ;                      
# NOT-NPMODADV = "NOT-PRE-NP-HEAD-OR-ADV"
SET NOT-NPMODADV-INDEF   = WORD - PRE-NP-HEAD - Adv - Indef ;              
# NOT-NPMODADVI = "     ...-OR-INDEF"
SET NOT-NPMODCC   = WORD - PRE-NP-HEAD - COMMA - @CNP ;
SET NAPP     = WORD - PRE-APP ;



#!! * Miscellaneous sets
# ------------------

 
 
 

#LIST OKTA = "1" "en" "et" "ei" ;
#SET NUM = Num - OKTA ;

# this set does not contain ordinals, I am not sure if that is necessary.

SET NOT-NUM = WORD - Num ;


SET CARDINALS = Num - Ord ;

SET NOT-CC = WORD - CC ;

SET NOT-PCLE = WORD - Pcle ;


LIST CONTRA = "men" ;
 # In lean muitalan, muhto dál muitalan.

LIST PROSEANTA = "prosent" "%" ;

SET REAL-CLB = CLB - COMMA ;

SET NOT-INITIAL-CC = WORD - INITIAL - CC ;



#!! * Border sets and their complements
# ---------------------------------

SET CP = (Pron Interr) OR (Pron Rel) ;

LIST BOUNDARYSYMBOLS =  "\;" ":" "-" "–" ;
	
SET S-BOUNDARY = CP OR BOUNDARYSYMBOLS OR @CVP ;
	# includes CP
	# this one includes @CVP, the conjunction which actually connects two sentences (each with a finite verb) to each other, 
	# and not @CNP, which coordinates internal NP-/AdvP-/AP ... coordination
	# To be used only AFTER the disambiguation of @CVP and @CNP taking place in the chapter right before "Disambiguating pronouns"


SET BOC = S-BOUNDARY OR BOS ;
SET BOC-PUNCT = BOC - ("-") - ("–") ; 
SET EOC = S-BOUNDARY OR EOS ;

SET NP-BOUNDARY = BOS OR EOS OR REAL-CLB OR VFIN OR Inf OR Recipr OR Pr OR Pcle OR Interj OR CS OR CP OR @CVP ;

SET APP-BOUNDARY = REAL-CLB OR VFIN OR Inf OR Recipr OR Pr OR Pcle OR Interj OR CS OR CP OR PrfPrc - @>N ;
# A special barrier used with mapping of appositions. 

# This set contains FMAINV with @, which means that it functions for all kind of mainverbs after the verb-mapping rules 
SET SV-BOUNDARY = S-BOUNDARY OR Inf - FAUXV OR FMAINV ;
 # VFIN-NOT-AUX ;
 # should be MAIN-V linked to VFIN-aux to the left. (cg-3)
# This set is ment to use in rules for disambiguating due to verbs or verbsets. It contents @.

SET SVF-BOUNDARY = S-BOUNDARY OR VFIN ;

# This set is ment to use in rules for disambiguating due to verbs or verbsets. 
# Here we search for either an S-BOUNDARY or a finite verb, either aux or main.

#LIST CASE = Nom Acc Dat ;





SET CCCOMMA = CC OR COMMA ;
	# remember that those are potential sentence boundaries, too



#!! * Syntactic sets
# --------------

LIST ALLSYNTAG = (@+FAUXV) (@+FMAINV) (@-FAUXV) (@-FMAINV) (@-FSUBJ>)(@-FOBJ)(@-F<ADVL)(@-FADVL>)(@>A) (@>ADVL) (@ADVL<) (@<ADVL) (@ADVL>) (@ADVL) (@>N) (@APP) (@APP-N<) (@APP-Pron<) (@APP>Pron) (@APP-Num<) (@APP-ADVL<) (@VOC)(@CNP) (@CVP) (@P<) (@>P) (@HNOUN) (@INTERJ) (@Pron<) (@OBJ) (@OBJ>) (@<OBJ) (@OPRED) (@<OPRED) (@OPRED>) (@SPRED<OBJ) (@PCLE) (@COMP-CS<) (@N<) (@SPRED) (@<SPRED) (@SPRED>) (@PPRED) (@Num<) (@SUBJ) (@<SUBJ) (@SUBJ>) (@X);
 

SET NON-APP = ALLSYNTAG - (@APP);

#!! These were the set types.



#!! ### Grammarchecker sets

LIST &msyn-agr-adjmsc-adjneu = &msyn-agr-adjmsc-adjneu ;
LIST &msyn-agr-adjneu-adjmsc = &msyn-agr-adjneu-adjmsc ;
LIST &msyn-agr-detneu-detfem =  &msyn-agr-detneu-detfem ;
LIST &msyn-agr-detneu-detmsc =  &msyn-agr-detneu-detmsc ;
LIST &msyn-det-msc-neu = &msyn-det-msc-neu ;
LIST &msyn-pred-adjmsc-adjneu = &msyn-pred-adjmsc-adjneu ;
LIST &msyn-pred-adjneu-adjmsc = &msyn-pred-adjneu-adjmsc ;
LIST &msyn-pron-nom-acc = &msyn-pron-nom-acc ;
LIST &msyn-qucompl-def-indef = &msyn-qucompl-def-indef ;
LIST &msyn-v-inf-pres = &msyn-v-inf-pres ;
LIST &msyn-v-pres-inf = &msyn-v-pres-inf ;
LIST &real-aa-og = &real-aa-og ;
LIST &real-bli-vaere = &real-bli-vaere ;
LIST &real-og-aa = &real-og-aa ;
LIST &real-vaere-bli = &real-vaere-bli ;

MAPPING-PREFIX = & ;

TEMPLATE nextWordCrossSent = (-1 (*)); # Adding mark to word that find the reference word to the left
TEMPLATE previousWordCrossSent = (1 (*)); # and vice versa


#!! # Rule section

SECTION


#!! ## Speller rules
# Speller suggestions rule – add &SUGGESTWF to any spelling suggestion
# that we actually want to suggest to the user.
# The simplest is to just add it to all spelled words:
ADD:spell-it-all (&typo &SUGGESTWF) (<spelled>) ;
# But perhaps you want to only suggest spellings of words that are not inside "quotes":
ADD:spell-conservatively (&typo &SUGGESTWF) (<spelled>) IF (NEGATE -1 QMARK LINK 2 QMARK);


#!! ## NP internal agreement

#  Ensure preceding adjective agrees with noun

#!! msyn-agr-adjmsc-adjneu

ADD:msyn-agr-adjmsc-adjneu (&msyn-agr-adjmsc-adjneu) TARGET A IF (-1 Det)(0 A + MF OR Msc OR Fem)(NOT 0 A + Neu)(1C N + Neu);
COPY:msyn-agr-adjmsc-adjneu (Neu Sg Indef &SUGGEST)  EXCEPT (Fem Sg Indef) OR (Msc Sg Indef) OR (MF Sg Indef)  TARGET (A Pos &msyn-agr-adjmsc-adjneu) ;
ADDRELATION:msyn-agr-adjmsc-adjneu ($2) (*) FROM (T:nextWordCrossSent LINK 0 (&msyn-agr-adjmsc-adjneu)) ;

## Dette er et fin hus.
#$ Dette er et fint hus.


#!! msyn-agr-adjneu-adjmsc
ADD:msyn-agr-adjneu-adjmsc (&msyn-agr-adjneu-adjmsc) TARGET A IF (-1 Det + MF OR Pron + Indef + MF OR Pron + Indef + Msc)(0 A + Neu)(1 N + Msc);
COPY:msyn-agr-adjneu-adjmsc (Msc Sg Indef &SUGGEST) EXCEPT (Neu Sg Indef) TARGET (A Pos &msyn-agr-adjmsc-adjneu);
ADDRELATION:msyn-agr-adjneu-adjmsc ($2) (*) FROM (T:nextWordCrossSent LINK 0 (&msyn-agr-adjneu-adjmsc)) ;

## Dette er en fint båt.
#$ Dette er en fin båt.

#!! msyn-agr-detneu-detfem
ADD:msyn-agr-detneu-detfem (&msyn-agr-detneu-detfem) TARGET (Det Dem Neu Sg) IF (1 (N Fem Sg Def));
COPY:msyn-agr-detneu-detfem (Fem Sg &SUGGEST) EXCEPT (Neu Sg) TARGET (Det Dem &msyn-agr-detneu-detfem);
## Mannen kjøpte det boka.
#$ Mannen kjøpte den boka.



ADD:msyn-agr-detneu-detfem (&msyn-agr-detneu-detfem) TARGET ("et" Det Neu) IF (1 (Def Clt))(2 (N Sg Fem Indef));
COPY:msyn-agr-detneu-detfem ("ei" Det Fem &SUGGEST) EXCEPT ("et" Det Neu) TARGET (&msyn-agr-detneu-detfem);

ADD:msyn-agr-detneu-detfem (&msyn-agr-detneu-detfem) TARGET ("et" Pron Indef Neu Sg) IF (1 (Def Clt))(2 (N Sg Fem Indef));
COPY:msyn-agr-detneu-detfem ("ei" Det Fem &SUGGEST) EXCEPT ("et" Pron Indef Neu Sg) TARGET (&msyn-agr-detneu-detfem);
## Det er et realitetens kvinne
#$ Det er ei realitetens kvinne

#!! msyn-agr-detneu-detmsc
ADD:msyn-agr-detneu-detmsc (&msyn-agr-detneu-detmsc) TARGET ("et" Det Neu) IF (1 (Def Clt))(2 (N Sg Msc Indef));
COPY:msyn-agr-detneu-detmsc ("en" Det Dem Msc Sg &SUGGEST) EXCEPT ("et" Det Neu) TARGET (&msyn-agr-detneu-detmsc);

ADD:msyn-agr-detneu-detmsc (&msyn-agr-detneu-detmsc) TARGET ("et" Pron Indef Neu Sg) IF (1 (Def Clt))(2 (N Sg Msc Indef));
COPY:msyn-agr-detneu-detmsc ("en" Det Dem Msc Sg &SUGGEST) EXCEPT ("et" Pron Indef Neu Sg) TARGET (&msyn-agr-detneu-detmsc);
## Det er et realitetens kvinne
#$ Det er ei realitetens kvinne


#!! msyn-det-msc-neu

# Definite that should be indefinite
#ADD:msyn-defness_m_def (&msyn-defness_m_def) TARGET


#!! ## Quantifier phrases

ADD:msyn-qucompl-def-indef (&msyn-qucompl-def-indef) TARGET N + Pl + Def IF (*-1 Num OR ("mange") BARRIER NOT-A LINK NOT 0 Sem/ID LINK NOT -1 (§));
COPY:msyn-qucompl-def-indef (Indef &SUGGEST) EXCEPT Def TARGET (&msyn-qucompl-def-indef); 
ADDRELATION:msyn-qucompl-def-indef ($2) (*) FROM (T:previousWordCrossSent LINK 0 (&msyn-qucompl-def-indef)) ;
## Vi har mange bøkene.

#!! ## Predicative gender agreement


#!! msyn-pred-adjmsc-adjneu

ADD:msyn-pred-adjmsc-adjneu (&msyn-pred-adjmsc-adjneu) TARGET (A) IF (-2C (N Neu Sg) OR ("det"))(0C Msc OR Fem OR MF)(-1 ("være"));
COPY:msyn-pred-adjmsc-adjneu (Neu Sg Indef &SUGGEST) EXCEPT (Msc Sg Indef)  TARGET (A Pos &msyn-pred-adjmsc-adjneu);
ADDRELATION:real-v-aa-og ($2) (N) FROM (2 A LINK 0 (&msyn-pred-adjmsc-adjneu)) ;

## Eplet var god.
#$ Eplet var godt.


ADD:msyn-pred-adjmsc-adjneu (&msyn-pred-adjmsc-adjneu) TARGET (A Msc Sg) IF (-3C (N Neu Sg) OR ("det"))(-2 ("som"))(-1 ("være"));
COPY:msyn-pred-adjmsc-adjneu (Neu Sg Indef &SUGGEST) EXCEPT (Msc Sg Indef) TARGET (A Pos &msyn-pred-adjmsc-adjneu);
ADDRELATION:msyn-pred-adjmsc-adjneu ($2) (N) FROM (3 A LINK 0 (&msyn-pred-adjmsc-adjneu)) ;
ADDRELATION:msyn-pred-adjmsc-adjneu ($2) (N) FROM (4 A LINK 0 (&msyn-pred-adjmsc-adjneu)) ;
ADDRELATION:msyn-pred-adjmsc-adjneu ($2) (N) FROM (5 A LINK 0 (&msyn-pred-adjmsc-adjneu)) ;
ADDRELATION:msyn-pred-adjmsc-adjneu ($2) (N) FROM (6 A LINK 0 (&msyn-pred-adjmsc-adjneu)) ;
## Jeg spiste et eple som var god.
#$ Jeg spiste et eple som var godt.


#!! msyn-pred-adjneu-adjmsc


#!! ## Case errors

ADD:msyn-pron-nom-acc (&msyn-pron-nom-acc) TARGET (Pron Pers Sg2 Nom) IF (-1 Pr)(NOT -1 ("for") OR ("som") OR ("om"));
COPY:msyn-pron-nom-acc (Acc &SUGGEST) EXCEPT (Nom) TARGET (Pron Pers Sg2 &msyn-pron-nom-acc);
## Vi snakker om du.
#$ Vi snakker om deg.



#!! ## Finite verb

ADD:msyn-v-inf-pres (&msyn-v-inf-pres) TARGET (V Inf) IF (-1C (N) OR (Pron Nom))(*-2 BOS BARRIER VFIN)(NOT -1 ("å"))(0 V)(NOT *0 VFIN);
COPY:msyn-v-inf-pres (Ind Prs &SUGGEST) EXCEPT (Inf)  TARGET (V Inf &msyn-v-inf-pres);
ADDRELATION:msyn-v-inf-pres ($2) (*) FROM (1 V LINK 0 (&msyn-v-inf-pres)) ;

## Jeg like peanøtter.
#$ Jeg liker peanøtter.

## Jeg spise peanøtter.
#$ Jeg spiser peanøtter.

#$ Hvorfor skulle jeg miste dere begge på en slik dag?


#!! ## Infinitive

ADD:msyn-v-pres-inf (&msyn-v-pres-inf) TARGET (V Ind Prs) IF (-2C (N) OR (Pron Nom))(-1 hj-V)(0 V);
COPY:msyn-v-pres-inf (Inf &SUGGEST) EXCEPT (Ind Prs)  TARGET (V Ind Prs &msyn-v-pres-inf);
ADDRELATION:msyn-v-pres-inf ($2) (V) FROM (1 V LINK 0 (&msyn-v-pres-inf)) ;




#!! ## og/å

ADD:real-og-aa (&real-og-aa) TARGET ("og" CC) IF (-1 Ind)(1 Inf);
COPY:real-og-aa ("å" IM &SUGGEST) EXCEPT ("og" CC) TARGET (CC &real-og-aa);
## Vi prøver og gå.
#$ Vi prøver å gå.

ADD:real-aa-og (&real-aa-og) TARGET ("å") IF (-1 N) (1C N);
COPY:real-aa-og ("og" CC &SUGGEST) EXCEPT ("å" IM) TARGET (IM &real-aa-og);
ADDRELATION:real-aa-og ($2) (N) FROM (1 IM LINK 0 (&real-aa-og)) ;
ADDRELATION:real-aa-og ($3) (N) FROM (-1 IM LINK 0 (&real-aa-og)) ;
## Det var Trond å Kari.
#$ Det var Trond og Kari.

ADD:real-v-aa-og (&real-v-aa-og) TARGET ("å") IF (-2 hj-V)(-1 V + $$VERBFORM LINK NOT 0 QUASIAUX) (1 V + $$VERBFORM);
ADD:real-v-aa-og (&real-v-aa-og) TARGET ("å") IF (NOT *-4 ("som") LINK -1 A)(-2 hj-V)(-1 V + $$VERBFORM LINK NOT 0 QUASIAUX) (1 V + $$VERBFORM);
COPY:real-v-aa-og ("og" CC &SUGGEST) EXCEPT ("å" IM) TARGET (IM &real-v-aa-og);
COPY:real-v-aa-og ("og" CC &SUGGEST) EXCEPT ("å" Use/SpellNoSugg N Sem/Sign ABBR Gram/TAbbr N ABBR) TARGET (N &real-v-aa-og);

#$ Vi prøver å skrive lyrikk.
#$ Vi må prøve å skrive lyrikk.
#% Vi må lese å skrive lyrikk.
#$ Det er ikke så lett som man skulle tro å skrive lyrikk.
#% Vi vil skrive å utgi lyrikk.

ADD:real-v-aa-og (&real-v-aa-og) TARGET ("å") IF ( -2 hj-V)(-1 V + $$INDFORM)(NOT -1 QUASIAUX) (1 V + $$INDFORM);
ADD:real-v-aa-og (&real-v-aa-og) TARGET ("å") IF (NOT -2 hj-V)(-1 V + $$INDFORM)(NOT -1 QUASIAUX) (1 V + $$INDFORM);
COPY:real-v-aa-og ("og" CC &SUGGEST) EXCEPT ("å" IM) TARGET (IM &real-v-aa-og);
COPY:real-v-aa-og ("og" CC &SUGGEST) EXCEPT ("å" Use/SpellNoSugg N Sem/Sign ABBR Gram/TAbbr N ABBR) TARGET (N &real-v-aa-og);

ADDRELATION:real-v-aa-og ($2) (V) FROM (1 IM OR N LINK 0 (&real-v-aa-og)) ;
ADDRELATION:real-v-aa-og ($3) (V) FROM (-1 IM OR N LINK 0 (&real-v-aa-og)) ;


# Simple punctuation rules showing how to change the lemma in the suggestions:
ADD:use-guillemets (&guillemets) TARGET (""");
COPY:left-guillemet ("«" &SUGGEST) EXCEPT (""") TARGET (&guillemets) ;
COPY:right-guillemet ("»" &SUGGEST) EXCEPT (""") TARGET (&guillemets) ;

ADD:use-ellipsis (&ellipsis) TARGET ("...");
COPY:use-ellipsis ("…" &SUGGEST) EXCEPT ("...") TARGET (&ellipsis) ;
